// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/account"
	"github.com/Pyakz/buildbox-api/ent/generated/milestone"
	"github.com/Pyakz/buildbox-api/ent/generated/project"
	"github.com/Pyakz/buildbox-api/ent/generated/task"
	"github.com/Pyakz/buildbox-api/ent/generated/user"
	"github.com/google/uuid"
)

// MilestoneCreate is the builder for creating a Milestone entity.
type MilestoneCreate struct {
	config
	mutation *MilestoneMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (mc *MilestoneCreate) SetAccountID(i int) *MilestoneCreate {
	mc.mutation.SetAccountID(i)
	return mc
}

// SetCreatedBy sets the "created_by" field.
func (mc *MilestoneCreate) SetCreatedBy(i int) *MilestoneCreate {
	mc.mutation.SetCreatedBy(i)
	return mc
}

// SetProjectID sets the "project_id" field.
func (mc *MilestoneCreate) SetProjectID(i int) *MilestoneCreate {
	mc.mutation.SetProjectID(i)
	return mc
}

// SetTitle sets the "title" field.
func (mc *MilestoneCreate) SetTitle(s string) *MilestoneCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetDescription sets the "description" field.
func (mc *MilestoneCreate) SetDescription(s string) *MilestoneCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetEndDate sets the "end_date" field.
func (mc *MilestoneCreate) SetEndDate(t time.Time) *MilestoneCreate {
	mc.mutation.SetEndDate(t)
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MilestoneCreate) SetUpdatedAt(t time.Time) *MilestoneCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MilestoneCreate) SetNillableUpdatedAt(t *time.Time) *MilestoneCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MilestoneCreate) SetCreatedAt(t time.Time) *MilestoneCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MilestoneCreate) SetNillableCreatedAt(t *time.Time) *MilestoneCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetDeleted sets the "deleted" field.
func (mc *MilestoneCreate) SetDeleted(b bool) *MilestoneCreate {
	mc.mutation.SetDeleted(b)
	return mc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (mc *MilestoneCreate) SetNillableDeleted(b *bool) *MilestoneCreate {
	if b != nil {
		mc.SetDeleted(*b)
	}
	return mc
}

// SetUUID sets the "uuid" field.
func (mc *MilestoneCreate) SetUUID(u uuid.UUID) *MilestoneCreate {
	mc.mutation.SetUUID(u)
	return mc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (mc *MilestoneCreate) SetNillableUUID(u *uuid.UUID) *MilestoneCreate {
	if u != nil {
		mc.SetUUID(*u)
	}
	return mc
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (mc *MilestoneCreate) AddTaskIDs(ids ...int) *MilestoneCreate {
	mc.mutation.AddTaskIDs(ids...)
	return mc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (mc *MilestoneCreate) AddTasks(t ...*Task) *MilestoneCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddTaskIDs(ids...)
}

// SetAccount sets the "account" edge to the Account entity.
func (mc *MilestoneCreate) SetAccount(a *Account) *MilestoneCreate {
	return mc.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mc *MilestoneCreate) SetUserID(id int) *MilestoneCreate {
	mc.mutation.SetUserID(id)
	return mc
}

// SetUser sets the "user" edge to the User entity.
func (mc *MilestoneCreate) SetUser(u *User) *MilestoneCreate {
	return mc.SetUserID(u.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (mc *MilestoneCreate) SetProject(p *Project) *MilestoneCreate {
	return mc.SetProjectID(p.ID)
}

// Mutation returns the MilestoneMutation object of the builder.
func (mc *MilestoneCreate) Mutation() *MilestoneMutation {
	return mc.mutation
}

// Save creates the Milestone in the database.
func (mc *MilestoneCreate) Save(ctx context.Context) (*Milestone, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MilestoneCreate) SaveX(ctx context.Context) *Milestone {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MilestoneCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MilestoneCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MilestoneCreate) defaults() {
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := milestone.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := milestone.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.Deleted(); !ok {
		v := milestone.DefaultDeleted
		mc.mutation.SetDeleted(v)
	}
	if _, ok := mc.mutation.UUID(); !ok {
		v := milestone.DefaultUUID()
		mc.mutation.SetUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MilestoneCreate) check() error {
	if _, ok := mc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`generated: missing required field "Milestone.account_id"`)}
	}
	if _, ok := mc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`generated: missing required field "Milestone.created_by"`)}
	}
	if _, ok := mc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`generated: missing required field "Milestone.project_id"`)}
	}
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "Milestone.title"`)}
	}
	if v, ok := mc.mutation.Title(); ok {
		if err := milestone.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Milestone.title": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`generated: missing required field "Milestone.description"`)}
	}
	if v, ok := mc.mutation.Description(); ok {
		if err := milestone.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Milestone.description": %w`, err)}
		}
	}
	if _, ok := mc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`generated: missing required field "Milestone.end_date"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Milestone.updated_at"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Milestone.created_at"`)}
	}
	if _, ok := mc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`generated: missing required field "Milestone.uuid"`)}
	}
	if _, ok := mc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`generated: missing required edge "Milestone.account"`)}
	}
	if _, ok := mc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`generated: missing required edge "Milestone.user"`)}
	}
	if _, ok := mc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`generated: missing required edge "Milestone.project"`)}
	}
	return nil
}

func (mc *MilestoneCreate) sqlSave(ctx context.Context) (*Milestone, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MilestoneCreate) createSpec() (*Milestone, *sqlgraph.CreateSpec) {
	var (
		_node = &Milestone{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(milestone.Table, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(milestone.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(milestone.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mc.mutation.EndDate(); ok {
		_spec.SetField(milestone.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(milestone.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(milestone.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.Deleted(); ok {
		_spec.SetField(milestone.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := mc.mutation.UUID(); ok {
		_spec.SetField(milestone.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if nodes := mc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.TasksTable,
			Columns: []string{milestone.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.AccountTable,
			Columns: []string{milestone.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.UserTable,
			Columns: []string{milestone.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.ProjectTable,
			Columns: []string{milestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MilestoneCreateBulk is the builder for creating many Milestone entities in bulk.
type MilestoneCreateBulk struct {
	config
	err      error
	builders []*MilestoneCreate
}

// Save creates the Milestone entities in the database.
func (mcb *MilestoneCreateBulk) Save(ctx context.Context) ([]*Milestone, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Milestone, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MilestoneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MilestoneCreateBulk) SaveX(ctx context.Context) []*Milestone {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MilestoneCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MilestoneCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
