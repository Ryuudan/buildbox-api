// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/account"
	"github.com/Pyakz/buildbox-api/ent/generated/predicate"
	"github.com/Pyakz/buildbox-api/ent/generated/serviceprovider"
	"github.com/Pyakz/buildbox-api/ent/generated/user"
)

// ServiceProviderUpdate is the builder for updating ServiceProvider entities.
type ServiceProviderUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceProviderMutation
}

// Where appends a list predicates to the ServiceProviderUpdate builder.
func (spu *ServiceProviderUpdate) Where(ps ...predicate.ServiceProvider) *ServiceProviderUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetAccountID sets the "account_id" field.
func (spu *ServiceProviderUpdate) SetAccountID(i int) *ServiceProviderUpdate {
	spu.mutation.SetAccountID(i)
	return spu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (spu *ServiceProviderUpdate) SetNillableAccountID(i *int) *ServiceProviderUpdate {
	if i != nil {
		spu.SetAccountID(*i)
	}
	return spu
}

// SetCreatedBy sets the "created_by" field.
func (spu *ServiceProviderUpdate) SetCreatedBy(i int) *ServiceProviderUpdate {
	spu.mutation.SetCreatedBy(i)
	return spu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (spu *ServiceProviderUpdate) SetNillableCreatedBy(i *int) *ServiceProviderUpdate {
	if i != nil {
		spu.SetCreatedBy(*i)
	}
	return spu
}

// SetName sets the "name" field.
func (spu *ServiceProviderUpdate) SetName(s string) *ServiceProviderUpdate {
	spu.mutation.SetName(s)
	return spu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spu *ServiceProviderUpdate) SetNillableName(s *string) *ServiceProviderUpdate {
	if s != nil {
		spu.SetName(*s)
	}
	return spu
}

// SetEmail sets the "email" field.
func (spu *ServiceProviderUpdate) SetEmail(s string) *ServiceProviderUpdate {
	spu.mutation.SetEmail(s)
	return spu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (spu *ServiceProviderUpdate) SetNillableEmail(s *string) *ServiceProviderUpdate {
	if s != nil {
		spu.SetEmail(*s)
	}
	return spu
}

// SetDescription sets the "description" field.
func (spu *ServiceProviderUpdate) SetDescription(s string) *ServiceProviderUpdate {
	spu.mutation.SetDescription(s)
	return spu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (spu *ServiceProviderUpdate) SetNillableDescription(s *string) *ServiceProviderUpdate {
	if s != nil {
		spu.SetDescription(*s)
	}
	return spu
}

// ClearDescription clears the value of the "description" field.
func (spu *ServiceProviderUpdate) ClearDescription() *ServiceProviderUpdate {
	spu.mutation.ClearDescription()
	return spu
}

// SetStatus sets the "status" field.
func (spu *ServiceProviderUpdate) SetStatus(s serviceprovider.Status) *ServiceProviderUpdate {
	spu.mutation.SetStatus(s)
	return spu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spu *ServiceProviderUpdate) SetNillableStatus(s *serviceprovider.Status) *ServiceProviderUpdate {
	if s != nil {
		spu.SetStatus(*s)
	}
	return spu
}

// ClearStatus clears the value of the "status" field.
func (spu *ServiceProviderUpdate) ClearStatus() *ServiceProviderUpdate {
	spu.mutation.ClearStatus()
	return spu
}

// SetPhoneNumber sets the "phone_number" field.
func (spu *ServiceProviderUpdate) SetPhoneNumber(s string) *ServiceProviderUpdate {
	spu.mutation.SetPhoneNumber(s)
	return spu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (spu *ServiceProviderUpdate) SetNillablePhoneNumber(s *string) *ServiceProviderUpdate {
	if s != nil {
		spu.SetPhoneNumber(*s)
	}
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *ServiceProviderUpdate) SetUpdatedAt(t time.Time) *ServiceProviderUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spu *ServiceProviderUpdate) SetNillableUpdatedAt(t *time.Time) *ServiceProviderUpdate {
	if t != nil {
		spu.SetUpdatedAt(*t)
	}
	return spu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (spu *ServiceProviderUpdate) ClearUpdatedAt() *ServiceProviderUpdate {
	spu.mutation.ClearUpdatedAt()
	return spu
}

// SetAccount sets the "account" edge to the Account entity.
func (spu *ServiceProviderUpdate) SetAccount(a *Account) *ServiceProviderUpdate {
	return spu.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spu *ServiceProviderUpdate) SetUserID(id int) *ServiceProviderUpdate {
	spu.mutation.SetUserID(id)
	return spu
}

// SetUser sets the "user" edge to the User entity.
func (spu *ServiceProviderUpdate) SetUser(u *User) *ServiceProviderUpdate {
	return spu.SetUserID(u.ID)
}

// Mutation returns the ServiceProviderMutation object of the builder.
func (spu *ServiceProviderUpdate) Mutation() *ServiceProviderMutation {
	return spu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (spu *ServiceProviderUpdate) ClearAccount() *ServiceProviderUpdate {
	spu.mutation.ClearAccount()
	return spu
}

// ClearUser clears the "user" edge to the User entity.
func (spu *ServiceProviderUpdate) ClearUser() *ServiceProviderUpdate {
	spu.mutation.ClearUser()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *ServiceProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *ServiceProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *ServiceProviderUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *ServiceProviderUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *ServiceProviderUpdate) check() error {
	if v, ok := spu.mutation.Name(); ok {
		if err := serviceprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ServiceProvider.name": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Status(); ok {
		if err := serviceprovider.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ServiceProvider.status": %w`, err)}
		}
	}
	if _, ok := spu.mutation.AccountID(); spu.mutation.AccountCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServiceProvider.account"`)
	}
	if _, ok := spu.mutation.UserID(); spu.mutation.UserCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServiceProvider.user"`)
	}
	return nil
}

func (spu *ServiceProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceprovider.Table, serviceprovider.Columns, sqlgraph.NewFieldSpec(serviceprovider.FieldID, field.TypeInt))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Name(); ok {
		_spec.SetField(serviceprovider.FieldName, field.TypeString, value)
	}
	if value, ok := spu.mutation.Email(); ok {
		_spec.SetField(serviceprovider.FieldEmail, field.TypeString, value)
	}
	if value, ok := spu.mutation.Description(); ok {
		_spec.SetField(serviceprovider.FieldDescription, field.TypeString, value)
	}
	if spu.mutation.DescriptionCleared() {
		_spec.ClearField(serviceprovider.FieldDescription, field.TypeString)
	}
	if value, ok := spu.mutation.Status(); ok {
		_spec.SetField(serviceprovider.FieldStatus, field.TypeEnum, value)
	}
	if spu.mutation.StatusCleared() {
		_spec.ClearField(serviceprovider.FieldStatus, field.TypeEnum)
	}
	if value, ok := spu.mutation.PhoneNumber(); ok {
		_spec.SetField(serviceprovider.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if spu.mutation.UpdatedAtCleared() {
		_spec.ClearField(serviceprovider.FieldUpdatedAt, field.TypeTime)
	}
	if spu.mutation.CreatedAtCleared() {
		_spec.ClearField(serviceprovider.FieldCreatedAt, field.TypeTime)
	}
	if spu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceprovider.AccountTable,
			Columns: []string{serviceprovider.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceprovider.AccountTable,
			Columns: []string{serviceprovider.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceprovider.UserTable,
			Columns: []string{serviceprovider.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceprovider.UserTable,
			Columns: []string{serviceprovider.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// ServiceProviderUpdateOne is the builder for updating a single ServiceProvider entity.
type ServiceProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceProviderMutation
}

// SetAccountID sets the "account_id" field.
func (spuo *ServiceProviderUpdateOne) SetAccountID(i int) *ServiceProviderUpdateOne {
	spuo.mutation.SetAccountID(i)
	return spuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (spuo *ServiceProviderUpdateOne) SetNillableAccountID(i *int) *ServiceProviderUpdateOne {
	if i != nil {
		spuo.SetAccountID(*i)
	}
	return spuo
}

// SetCreatedBy sets the "created_by" field.
func (spuo *ServiceProviderUpdateOne) SetCreatedBy(i int) *ServiceProviderUpdateOne {
	spuo.mutation.SetCreatedBy(i)
	return spuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (spuo *ServiceProviderUpdateOne) SetNillableCreatedBy(i *int) *ServiceProviderUpdateOne {
	if i != nil {
		spuo.SetCreatedBy(*i)
	}
	return spuo
}

// SetName sets the "name" field.
func (spuo *ServiceProviderUpdateOne) SetName(s string) *ServiceProviderUpdateOne {
	spuo.mutation.SetName(s)
	return spuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spuo *ServiceProviderUpdateOne) SetNillableName(s *string) *ServiceProviderUpdateOne {
	if s != nil {
		spuo.SetName(*s)
	}
	return spuo
}

// SetEmail sets the "email" field.
func (spuo *ServiceProviderUpdateOne) SetEmail(s string) *ServiceProviderUpdateOne {
	spuo.mutation.SetEmail(s)
	return spuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (spuo *ServiceProviderUpdateOne) SetNillableEmail(s *string) *ServiceProviderUpdateOne {
	if s != nil {
		spuo.SetEmail(*s)
	}
	return spuo
}

// SetDescription sets the "description" field.
func (spuo *ServiceProviderUpdateOne) SetDescription(s string) *ServiceProviderUpdateOne {
	spuo.mutation.SetDescription(s)
	return spuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (spuo *ServiceProviderUpdateOne) SetNillableDescription(s *string) *ServiceProviderUpdateOne {
	if s != nil {
		spuo.SetDescription(*s)
	}
	return spuo
}

// ClearDescription clears the value of the "description" field.
func (spuo *ServiceProviderUpdateOne) ClearDescription() *ServiceProviderUpdateOne {
	spuo.mutation.ClearDescription()
	return spuo
}

// SetStatus sets the "status" field.
func (spuo *ServiceProviderUpdateOne) SetStatus(s serviceprovider.Status) *ServiceProviderUpdateOne {
	spuo.mutation.SetStatus(s)
	return spuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spuo *ServiceProviderUpdateOne) SetNillableStatus(s *serviceprovider.Status) *ServiceProviderUpdateOne {
	if s != nil {
		spuo.SetStatus(*s)
	}
	return spuo
}

// ClearStatus clears the value of the "status" field.
func (spuo *ServiceProviderUpdateOne) ClearStatus() *ServiceProviderUpdateOne {
	spuo.mutation.ClearStatus()
	return spuo
}

// SetPhoneNumber sets the "phone_number" field.
func (spuo *ServiceProviderUpdateOne) SetPhoneNumber(s string) *ServiceProviderUpdateOne {
	spuo.mutation.SetPhoneNumber(s)
	return spuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (spuo *ServiceProviderUpdateOne) SetNillablePhoneNumber(s *string) *ServiceProviderUpdateOne {
	if s != nil {
		spuo.SetPhoneNumber(*s)
	}
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *ServiceProviderUpdateOne) SetUpdatedAt(t time.Time) *ServiceProviderUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spuo *ServiceProviderUpdateOne) SetNillableUpdatedAt(t *time.Time) *ServiceProviderUpdateOne {
	if t != nil {
		spuo.SetUpdatedAt(*t)
	}
	return spuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (spuo *ServiceProviderUpdateOne) ClearUpdatedAt() *ServiceProviderUpdateOne {
	spuo.mutation.ClearUpdatedAt()
	return spuo
}

// SetAccount sets the "account" edge to the Account entity.
func (spuo *ServiceProviderUpdateOne) SetAccount(a *Account) *ServiceProviderUpdateOne {
	return spuo.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spuo *ServiceProviderUpdateOne) SetUserID(id int) *ServiceProviderUpdateOne {
	spuo.mutation.SetUserID(id)
	return spuo
}

// SetUser sets the "user" edge to the User entity.
func (spuo *ServiceProviderUpdateOne) SetUser(u *User) *ServiceProviderUpdateOne {
	return spuo.SetUserID(u.ID)
}

// Mutation returns the ServiceProviderMutation object of the builder.
func (spuo *ServiceProviderUpdateOne) Mutation() *ServiceProviderMutation {
	return spuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (spuo *ServiceProviderUpdateOne) ClearAccount() *ServiceProviderUpdateOne {
	spuo.mutation.ClearAccount()
	return spuo
}

// ClearUser clears the "user" edge to the User entity.
func (spuo *ServiceProviderUpdateOne) ClearUser() *ServiceProviderUpdateOne {
	spuo.mutation.ClearUser()
	return spuo
}

// Where appends a list predicates to the ServiceProviderUpdate builder.
func (spuo *ServiceProviderUpdateOne) Where(ps ...predicate.ServiceProvider) *ServiceProviderUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *ServiceProviderUpdateOne) Select(field string, fields ...string) *ServiceProviderUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated ServiceProvider entity.
func (spuo *ServiceProviderUpdateOne) Save(ctx context.Context) (*ServiceProvider, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *ServiceProviderUpdateOne) SaveX(ctx context.Context) *ServiceProvider {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *ServiceProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *ServiceProviderUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *ServiceProviderUpdateOne) check() error {
	if v, ok := spuo.mutation.Name(); ok {
		if err := serviceprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ServiceProvider.name": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Status(); ok {
		if err := serviceprovider.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ServiceProvider.status": %w`, err)}
		}
	}
	if _, ok := spuo.mutation.AccountID(); spuo.mutation.AccountCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServiceProvider.account"`)
	}
	if _, ok := spuo.mutation.UserID(); spuo.mutation.UserCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServiceProvider.user"`)
	}
	return nil
}

func (spuo *ServiceProviderUpdateOne) sqlSave(ctx context.Context) (_node *ServiceProvider, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceprovider.Table, serviceprovider.Columns, sqlgraph.NewFieldSpec(serviceprovider.FieldID, field.TypeInt))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServiceProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceprovider.FieldID)
		for _, f := range fields {
			if !serviceprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != serviceprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Name(); ok {
		_spec.SetField(serviceprovider.FieldName, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Email(); ok {
		_spec.SetField(serviceprovider.FieldEmail, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Description(); ok {
		_spec.SetField(serviceprovider.FieldDescription, field.TypeString, value)
	}
	if spuo.mutation.DescriptionCleared() {
		_spec.ClearField(serviceprovider.FieldDescription, field.TypeString)
	}
	if value, ok := spuo.mutation.Status(); ok {
		_spec.SetField(serviceprovider.FieldStatus, field.TypeEnum, value)
	}
	if spuo.mutation.StatusCleared() {
		_spec.ClearField(serviceprovider.FieldStatus, field.TypeEnum)
	}
	if value, ok := spuo.mutation.PhoneNumber(); ok {
		_spec.SetField(serviceprovider.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if spuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(serviceprovider.FieldUpdatedAt, field.TypeTime)
	}
	if spuo.mutation.CreatedAtCleared() {
		_spec.ClearField(serviceprovider.FieldCreatedAt, field.TypeTime)
	}
	if spuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceprovider.AccountTable,
			Columns: []string{serviceprovider.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceprovider.AccountTable,
			Columns: []string{serviceprovider.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceprovider.UserTable,
			Columns: []string{serviceprovider.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceprovider.UserTable,
			Columns: []string{serviceprovider.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceProvider{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
