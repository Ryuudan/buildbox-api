// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pyakz/buildbox-api/ent/generated/project"
	"github.com/Pyakz/buildbox-api/ent/generated/projectserviceprovider"
	"github.com/Pyakz/buildbox-api/ent/generated/serviceprovider"
	"github.com/google/uuid"
)

// ProjectServiceProvider is the model entity for the ProjectServiceProvider schema.
type ProjectServiceProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// ProjectServiceProviderID holds the value of the "project_service_provider_id" field.
	ProjectServiceProviderID int `json:"project_service_provider_id,omitempty"`
	// ProjectProjectID holds the value of the "project_project_id" field.
	ProjectProjectID int `json:"project_project_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectServiceProviderQuery when eager-loading is set.
	Edges        ProjectServiceProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectServiceProviderEdges holds the relations/edges for other nodes in the graph.
type ProjectServiceProviderEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// ServiceProvider holds the value of the service_provider edge.
	ServiceProvider *ServiceProvider `json:"service_provider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectServiceProviderEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// ServiceProviderOrErr returns the ServiceProvider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectServiceProviderEdges) ServiceProviderOrErr() (*ServiceProvider, error) {
	if e.loadedTypes[1] {
		if e.ServiceProvider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: serviceprovider.Label}
		}
		return e.ServiceProvider, nil
	}
	return nil, &NotLoadedError{edge: "service_provider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectServiceProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectserviceprovider.FieldID, projectserviceprovider.FieldCreatedBy, projectserviceprovider.FieldProjectServiceProviderID, projectserviceprovider.FieldProjectProjectID:
			values[i] = new(sql.NullInt64)
		case projectserviceprovider.FieldUpdatedAt, projectserviceprovider.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case projectserviceprovider.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectServiceProvider fields.
func (psp *ProjectServiceProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectserviceprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			psp.ID = int(value.Int64)
		case projectserviceprovider.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				psp.CreatedBy = int(value.Int64)
			}
		case projectserviceprovider.FieldProjectServiceProviderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_service_provider_id", values[i])
			} else if value.Valid {
				psp.ProjectServiceProviderID = int(value.Int64)
			}
		case projectserviceprovider.FieldProjectProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_project_id", values[i])
			} else if value.Valid {
				psp.ProjectProjectID = int(value.Int64)
			}
		case projectserviceprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				psp.UpdatedAt = value.Time
			}
		case projectserviceprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				psp.CreatedAt = value.Time
			}
		case projectserviceprovider.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				psp.UUID = *value
			}
		default:
			psp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectServiceProvider.
// This includes values selected through modifiers, order, etc.
func (psp *ProjectServiceProvider) Value(name string) (ent.Value, error) {
	return psp.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectServiceProvider entity.
func (psp *ProjectServiceProvider) QueryProject() *ProjectQuery {
	return NewProjectServiceProviderClient(psp.config).QueryProject(psp)
}

// QueryServiceProvider queries the "service_provider" edge of the ProjectServiceProvider entity.
func (psp *ProjectServiceProvider) QueryServiceProvider() *ServiceProviderQuery {
	return NewProjectServiceProviderClient(psp.config).QueryServiceProvider(psp)
}

// Update returns a builder for updating this ProjectServiceProvider.
// Note that you need to call ProjectServiceProvider.Unwrap() before calling this method if this ProjectServiceProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (psp *ProjectServiceProvider) Update() *ProjectServiceProviderUpdateOne {
	return NewProjectServiceProviderClient(psp.config).UpdateOne(psp)
}

// Unwrap unwraps the ProjectServiceProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (psp *ProjectServiceProvider) Unwrap() *ProjectServiceProvider {
	_tx, ok := psp.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProjectServiceProvider is not a transactional entity")
	}
	psp.config.driver = _tx.drv
	return psp
}

// String implements the fmt.Stringer.
func (psp *ProjectServiceProvider) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectServiceProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", psp.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", psp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("project_service_provider_id=")
	builder.WriteString(fmt.Sprintf("%v", psp.ProjectServiceProviderID))
	builder.WriteString(", ")
	builder.WriteString("project_project_id=")
	builder.WriteString(fmt.Sprintf("%v", psp.ProjectProjectID))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(psp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(psp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", psp.UUID))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectServiceProviders is a parsable slice of ProjectServiceProvider.
type ProjectServiceProviders []*ProjectServiceProvider
