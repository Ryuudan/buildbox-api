// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/predicate"
	"github.com/Pyakz/buildbox-api/ent/generated/project"
	"github.com/Pyakz/buildbox-api/ent/generated/projectserviceprovider"
	"github.com/Pyakz/buildbox-api/ent/generated/serviceprovider"
)

// ProjectServiceProviderUpdate is the builder for updating ProjectServiceProvider entities.
type ProjectServiceProviderUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectServiceProviderMutation
}

// Where appends a list predicates to the ProjectServiceProviderUpdate builder.
func (pspu *ProjectServiceProviderUpdate) Where(ps ...predicate.ProjectServiceProvider) *ProjectServiceProviderUpdate {
	pspu.mutation.Where(ps...)
	return pspu
}

// SetCreatedBy sets the "created_by" field.
func (pspu *ProjectServiceProviderUpdate) SetCreatedBy(i int) *ProjectServiceProviderUpdate {
	pspu.mutation.ResetCreatedBy()
	pspu.mutation.SetCreatedBy(i)
	return pspu
}

// AddCreatedBy adds i to the "created_by" field.
func (pspu *ProjectServiceProviderUpdate) AddCreatedBy(i int) *ProjectServiceProviderUpdate {
	pspu.mutation.AddCreatedBy(i)
	return pspu
}

// SetProjectServiceProviderID sets the "project_service_provider_id" field.
func (pspu *ProjectServiceProviderUpdate) SetProjectServiceProviderID(i int) *ProjectServiceProviderUpdate {
	pspu.mutation.SetProjectServiceProviderID(i)
	return pspu
}

// SetNillableProjectServiceProviderID sets the "project_service_provider_id" field if the given value is not nil.
func (pspu *ProjectServiceProviderUpdate) SetNillableProjectServiceProviderID(i *int) *ProjectServiceProviderUpdate {
	if i != nil {
		pspu.SetProjectServiceProviderID(*i)
	}
	return pspu
}

// ClearProjectServiceProviderID clears the value of the "project_service_provider_id" field.
func (pspu *ProjectServiceProviderUpdate) ClearProjectServiceProviderID() *ProjectServiceProviderUpdate {
	pspu.mutation.ClearProjectServiceProviderID()
	return pspu
}

// SetProjectProjectID sets the "project_project_id" field.
func (pspu *ProjectServiceProviderUpdate) SetProjectProjectID(i int) *ProjectServiceProviderUpdate {
	pspu.mutation.SetProjectProjectID(i)
	return pspu
}

// SetNillableProjectProjectID sets the "project_project_id" field if the given value is not nil.
func (pspu *ProjectServiceProviderUpdate) SetNillableProjectProjectID(i *int) *ProjectServiceProviderUpdate {
	if i != nil {
		pspu.SetProjectProjectID(*i)
	}
	return pspu
}

// ClearProjectProjectID clears the value of the "project_project_id" field.
func (pspu *ProjectServiceProviderUpdate) ClearProjectProjectID() *ProjectServiceProviderUpdate {
	pspu.mutation.ClearProjectProjectID()
	return pspu
}

// SetUpdatedAt sets the "updated_at" field.
func (pspu *ProjectServiceProviderUpdate) SetUpdatedAt(t time.Time) *ProjectServiceProviderUpdate {
	pspu.mutation.SetUpdatedAt(t)
	return pspu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pspu *ProjectServiceProviderUpdate) SetNillableUpdatedAt(t *time.Time) *ProjectServiceProviderUpdate {
	if t != nil {
		pspu.SetUpdatedAt(*t)
	}
	return pspu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pspu *ProjectServiceProviderUpdate) ClearUpdatedAt() *ProjectServiceProviderUpdate {
	pspu.mutation.ClearUpdatedAt()
	return pspu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pspu *ProjectServiceProviderUpdate) SetProjectID(id int) *ProjectServiceProviderUpdate {
	pspu.mutation.SetProjectID(id)
	return pspu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (pspu *ProjectServiceProviderUpdate) SetNillableProjectID(id *int) *ProjectServiceProviderUpdate {
	if id != nil {
		pspu = pspu.SetProjectID(*id)
	}
	return pspu
}

// SetProject sets the "project" edge to the Project entity.
func (pspu *ProjectServiceProviderUpdate) SetProject(p *Project) *ProjectServiceProviderUpdate {
	return pspu.SetProjectID(p.ID)
}

// SetServiceProviderID sets the "service_provider" edge to the ServiceProvider entity by ID.
func (pspu *ProjectServiceProviderUpdate) SetServiceProviderID(id int) *ProjectServiceProviderUpdate {
	pspu.mutation.SetServiceProviderID(id)
	return pspu
}

// SetNillableServiceProviderID sets the "service_provider" edge to the ServiceProvider entity by ID if the given value is not nil.
func (pspu *ProjectServiceProviderUpdate) SetNillableServiceProviderID(id *int) *ProjectServiceProviderUpdate {
	if id != nil {
		pspu = pspu.SetServiceProviderID(*id)
	}
	return pspu
}

// SetServiceProvider sets the "service_provider" edge to the ServiceProvider entity.
func (pspu *ProjectServiceProviderUpdate) SetServiceProvider(s *ServiceProvider) *ProjectServiceProviderUpdate {
	return pspu.SetServiceProviderID(s.ID)
}

// Mutation returns the ProjectServiceProviderMutation object of the builder.
func (pspu *ProjectServiceProviderUpdate) Mutation() *ProjectServiceProviderMutation {
	return pspu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pspu *ProjectServiceProviderUpdate) ClearProject() *ProjectServiceProviderUpdate {
	pspu.mutation.ClearProject()
	return pspu
}

// ClearServiceProvider clears the "service_provider" edge to the ServiceProvider entity.
func (pspu *ProjectServiceProviderUpdate) ClearServiceProvider() *ProjectServiceProviderUpdate {
	pspu.mutation.ClearServiceProvider()
	return pspu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pspu *ProjectServiceProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pspu.sqlSave, pspu.mutation, pspu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pspu *ProjectServiceProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := pspu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pspu *ProjectServiceProviderUpdate) Exec(ctx context.Context) error {
	_, err := pspu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pspu *ProjectServiceProviderUpdate) ExecX(ctx context.Context) {
	if err := pspu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pspu *ProjectServiceProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(projectserviceprovider.Table, projectserviceprovider.Columns, sqlgraph.NewFieldSpec(projectserviceprovider.FieldID, field.TypeInt))
	if ps := pspu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pspu.mutation.CreatedBy(); ok {
		_spec.SetField(projectserviceprovider.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := pspu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(projectserviceprovider.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := pspu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectserviceprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if pspu.mutation.UpdatedAtCleared() {
		_spec.ClearField(projectserviceprovider.FieldUpdatedAt, field.TypeTime)
	}
	if pspu.mutation.CreatedAtCleared() {
		_spec.ClearField(projectserviceprovider.FieldCreatedAt, field.TypeTime)
	}
	if pspu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ProjectTable,
			Columns: []string{projectserviceprovider.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pspu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ProjectTable,
			Columns: []string{projectserviceprovider.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pspu.mutation.ServiceProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ServiceProviderTable,
			Columns: []string{projectserviceprovider.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceprovider.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pspu.mutation.ServiceProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ServiceProviderTable,
			Columns: []string{projectserviceprovider.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceprovider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pspu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectserviceprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pspu.mutation.done = true
	return n, nil
}

// ProjectServiceProviderUpdateOne is the builder for updating a single ProjectServiceProvider entity.
type ProjectServiceProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectServiceProviderMutation
}

// SetCreatedBy sets the "created_by" field.
func (pspuo *ProjectServiceProviderUpdateOne) SetCreatedBy(i int) *ProjectServiceProviderUpdateOne {
	pspuo.mutation.ResetCreatedBy()
	pspuo.mutation.SetCreatedBy(i)
	return pspuo
}

// AddCreatedBy adds i to the "created_by" field.
func (pspuo *ProjectServiceProviderUpdateOne) AddCreatedBy(i int) *ProjectServiceProviderUpdateOne {
	pspuo.mutation.AddCreatedBy(i)
	return pspuo
}

// SetProjectServiceProviderID sets the "project_service_provider_id" field.
func (pspuo *ProjectServiceProviderUpdateOne) SetProjectServiceProviderID(i int) *ProjectServiceProviderUpdateOne {
	pspuo.mutation.SetProjectServiceProviderID(i)
	return pspuo
}

// SetNillableProjectServiceProviderID sets the "project_service_provider_id" field if the given value is not nil.
func (pspuo *ProjectServiceProviderUpdateOne) SetNillableProjectServiceProviderID(i *int) *ProjectServiceProviderUpdateOne {
	if i != nil {
		pspuo.SetProjectServiceProviderID(*i)
	}
	return pspuo
}

// ClearProjectServiceProviderID clears the value of the "project_service_provider_id" field.
func (pspuo *ProjectServiceProviderUpdateOne) ClearProjectServiceProviderID() *ProjectServiceProviderUpdateOne {
	pspuo.mutation.ClearProjectServiceProviderID()
	return pspuo
}

// SetProjectProjectID sets the "project_project_id" field.
func (pspuo *ProjectServiceProviderUpdateOne) SetProjectProjectID(i int) *ProjectServiceProviderUpdateOne {
	pspuo.mutation.SetProjectProjectID(i)
	return pspuo
}

// SetNillableProjectProjectID sets the "project_project_id" field if the given value is not nil.
func (pspuo *ProjectServiceProviderUpdateOne) SetNillableProjectProjectID(i *int) *ProjectServiceProviderUpdateOne {
	if i != nil {
		pspuo.SetProjectProjectID(*i)
	}
	return pspuo
}

// ClearProjectProjectID clears the value of the "project_project_id" field.
func (pspuo *ProjectServiceProviderUpdateOne) ClearProjectProjectID() *ProjectServiceProviderUpdateOne {
	pspuo.mutation.ClearProjectProjectID()
	return pspuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pspuo *ProjectServiceProviderUpdateOne) SetUpdatedAt(t time.Time) *ProjectServiceProviderUpdateOne {
	pspuo.mutation.SetUpdatedAt(t)
	return pspuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pspuo *ProjectServiceProviderUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProjectServiceProviderUpdateOne {
	if t != nil {
		pspuo.SetUpdatedAt(*t)
	}
	return pspuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pspuo *ProjectServiceProviderUpdateOne) ClearUpdatedAt() *ProjectServiceProviderUpdateOne {
	pspuo.mutation.ClearUpdatedAt()
	return pspuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pspuo *ProjectServiceProviderUpdateOne) SetProjectID(id int) *ProjectServiceProviderUpdateOne {
	pspuo.mutation.SetProjectID(id)
	return pspuo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (pspuo *ProjectServiceProviderUpdateOne) SetNillableProjectID(id *int) *ProjectServiceProviderUpdateOne {
	if id != nil {
		pspuo = pspuo.SetProjectID(*id)
	}
	return pspuo
}

// SetProject sets the "project" edge to the Project entity.
func (pspuo *ProjectServiceProviderUpdateOne) SetProject(p *Project) *ProjectServiceProviderUpdateOne {
	return pspuo.SetProjectID(p.ID)
}

// SetServiceProviderID sets the "service_provider" edge to the ServiceProvider entity by ID.
func (pspuo *ProjectServiceProviderUpdateOne) SetServiceProviderID(id int) *ProjectServiceProviderUpdateOne {
	pspuo.mutation.SetServiceProviderID(id)
	return pspuo
}

// SetNillableServiceProviderID sets the "service_provider" edge to the ServiceProvider entity by ID if the given value is not nil.
func (pspuo *ProjectServiceProviderUpdateOne) SetNillableServiceProviderID(id *int) *ProjectServiceProviderUpdateOne {
	if id != nil {
		pspuo = pspuo.SetServiceProviderID(*id)
	}
	return pspuo
}

// SetServiceProvider sets the "service_provider" edge to the ServiceProvider entity.
func (pspuo *ProjectServiceProviderUpdateOne) SetServiceProvider(s *ServiceProvider) *ProjectServiceProviderUpdateOne {
	return pspuo.SetServiceProviderID(s.ID)
}

// Mutation returns the ProjectServiceProviderMutation object of the builder.
func (pspuo *ProjectServiceProviderUpdateOne) Mutation() *ProjectServiceProviderMutation {
	return pspuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pspuo *ProjectServiceProviderUpdateOne) ClearProject() *ProjectServiceProviderUpdateOne {
	pspuo.mutation.ClearProject()
	return pspuo
}

// ClearServiceProvider clears the "service_provider" edge to the ServiceProvider entity.
func (pspuo *ProjectServiceProviderUpdateOne) ClearServiceProvider() *ProjectServiceProviderUpdateOne {
	pspuo.mutation.ClearServiceProvider()
	return pspuo
}

// Where appends a list predicates to the ProjectServiceProviderUpdate builder.
func (pspuo *ProjectServiceProviderUpdateOne) Where(ps ...predicate.ProjectServiceProvider) *ProjectServiceProviderUpdateOne {
	pspuo.mutation.Where(ps...)
	return pspuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pspuo *ProjectServiceProviderUpdateOne) Select(field string, fields ...string) *ProjectServiceProviderUpdateOne {
	pspuo.fields = append([]string{field}, fields...)
	return pspuo
}

// Save executes the query and returns the updated ProjectServiceProvider entity.
func (pspuo *ProjectServiceProviderUpdateOne) Save(ctx context.Context) (*ProjectServiceProvider, error) {
	return withHooks(ctx, pspuo.sqlSave, pspuo.mutation, pspuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pspuo *ProjectServiceProviderUpdateOne) SaveX(ctx context.Context) *ProjectServiceProvider {
	node, err := pspuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pspuo *ProjectServiceProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := pspuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pspuo *ProjectServiceProviderUpdateOne) ExecX(ctx context.Context) {
	if err := pspuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pspuo *ProjectServiceProviderUpdateOne) sqlSave(ctx context.Context) (_node *ProjectServiceProvider, err error) {
	_spec := sqlgraph.NewUpdateSpec(projectserviceprovider.Table, projectserviceprovider.Columns, sqlgraph.NewFieldSpec(projectserviceprovider.FieldID, field.TypeInt))
	id, ok := pspuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProjectServiceProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pspuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectserviceprovider.FieldID)
		for _, f := range fields {
			if !projectserviceprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != projectserviceprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pspuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pspuo.mutation.CreatedBy(); ok {
		_spec.SetField(projectserviceprovider.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := pspuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(projectserviceprovider.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := pspuo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectserviceprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if pspuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(projectserviceprovider.FieldUpdatedAt, field.TypeTime)
	}
	if pspuo.mutation.CreatedAtCleared() {
		_spec.ClearField(projectserviceprovider.FieldCreatedAt, field.TypeTime)
	}
	if pspuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ProjectTable,
			Columns: []string{projectserviceprovider.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pspuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ProjectTable,
			Columns: []string{projectserviceprovider.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pspuo.mutation.ServiceProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ServiceProviderTable,
			Columns: []string{projectserviceprovider.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceprovider.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pspuo.mutation.ServiceProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ServiceProviderTable,
			Columns: []string{projectserviceprovider.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceprovider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectServiceProvider{config: pspuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pspuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectserviceprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pspuo.mutation.done = true
	return _node, nil
}
