// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/predicate"
	"github.com/Pyakz/buildbox-api/ent/generated/projectserviceprovider"
)

// ProjectServiceProviderDelete is the builder for deleting a ProjectServiceProvider entity.
type ProjectServiceProviderDelete struct {
	config
	hooks    []Hook
	mutation *ProjectServiceProviderMutation
}

// Where appends a list predicates to the ProjectServiceProviderDelete builder.
func (pspd *ProjectServiceProviderDelete) Where(ps ...predicate.ProjectServiceProvider) *ProjectServiceProviderDelete {
	pspd.mutation.Where(ps...)
	return pspd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pspd *ProjectServiceProviderDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pspd.sqlExec, pspd.mutation, pspd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pspd *ProjectServiceProviderDelete) ExecX(ctx context.Context) int {
	n, err := pspd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pspd *ProjectServiceProviderDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(projectserviceprovider.Table, sqlgraph.NewFieldSpec(projectserviceprovider.FieldID, field.TypeInt))
	if ps := pspd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pspd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pspd.mutation.done = true
	return affected, err
}

// ProjectServiceProviderDeleteOne is the builder for deleting a single ProjectServiceProvider entity.
type ProjectServiceProviderDeleteOne struct {
	pspd *ProjectServiceProviderDelete
}

// Where appends a list predicates to the ProjectServiceProviderDelete builder.
func (pspdo *ProjectServiceProviderDeleteOne) Where(ps ...predicate.ProjectServiceProvider) *ProjectServiceProviderDeleteOne {
	pspdo.pspd.mutation.Where(ps...)
	return pspdo
}

// Exec executes the deletion query.
func (pspdo *ProjectServiceProviderDeleteOne) Exec(ctx context.Context) error {
	n, err := pspdo.pspd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{projectserviceprovider.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pspdo *ProjectServiceProviderDeleteOne) ExecX(ctx context.Context) {
	if err := pspdo.Exec(ctx); err != nil {
		panic(err)
	}
}
