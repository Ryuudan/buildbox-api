// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pyakz/buildbox-api/ent/generated/account"
	"github.com/Pyakz/buildbox-api/ent/generated/serviceprovider"
	"github.com/Pyakz/buildbox-api/ent/generated/user"
	"github.com/google/uuid"
)

// ServiceProvider is the model entity for the ServiceProvider schema.
type ServiceProvider struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int `json:"account_id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name" validate:"required,min=1"`
	// Email holds the value of the "email" field.
	Email string `json:"email" validate:"required,email"`
	// Description holds the value of the "description" field.
	Description *string `json:"description" validate:"omitempty,min=1,max=300"`
	// Status holds the value of the "status" field.
	Status *serviceprovider.Status `json:"status" validate:"omitempty,oneof=active inactive"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number" validate:"required,e164"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceProviderQuery when eager-loading is set.
	Edges        ServiceProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceProviderEdges holds the relations/edges for other nodes in the graph.
type ServiceProviderEdges struct {
	// ServiceProviderProjects holds the value of the service_provider_projects edge.
	ServiceProviderProjects []*ProjectServiceProvider `json:"service_provider_projects,omitempty"`
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ServiceProviderProjectsOrErr returns the ServiceProviderProjects value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceProviderEdges) ServiceProviderProjectsOrErr() ([]*ProjectServiceProvider, error) {
	if e.loadedTypes[0] {
		return e.ServiceProviderProjects, nil
	}
	return nil, &NotLoadedError{edge: "service_provider_projects"}
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceProviderEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[1] {
		if e.Account == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceProviderEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceprovider.FieldID, serviceprovider.FieldAccountID, serviceprovider.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case serviceprovider.FieldName, serviceprovider.FieldEmail, serviceprovider.FieldDescription, serviceprovider.FieldStatus, serviceprovider.FieldPhoneNumber:
			values[i] = new(sql.NullString)
		case serviceprovider.FieldUpdatedAt, serviceprovider.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case serviceprovider.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceProvider fields.
func (sp *ServiceProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = int(value.Int64)
		case serviceprovider.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				sp.AccountID = int(value.Int64)
			}
		case serviceprovider.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sp.CreatedBy = int(value.Int64)
			}
		case serviceprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sp.Name = value.String
			}
		case serviceprovider.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				sp.Email = value.String
			}
		case serviceprovider.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sp.Description = new(string)
				*sp.Description = value.String
			}
		case serviceprovider.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = new(serviceprovider.Status)
				*sp.Status = serviceprovider.Status(value.String)
			}
		case serviceprovider.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				sp.PhoneNumber = value.String
			}
		case serviceprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case serviceprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case serviceprovider.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				sp.UUID = *value
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceProvider.
// This includes values selected through modifiers, order, etc.
func (sp *ServiceProvider) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// QueryServiceProviderProjects queries the "service_provider_projects" edge of the ServiceProvider entity.
func (sp *ServiceProvider) QueryServiceProviderProjects() *ProjectServiceProviderQuery {
	return NewServiceProviderClient(sp.config).QueryServiceProviderProjects(sp)
}

// QueryAccount queries the "account" edge of the ServiceProvider entity.
func (sp *ServiceProvider) QueryAccount() *AccountQuery {
	return NewServiceProviderClient(sp.config).QueryAccount(sp)
}

// QueryUser queries the "user" edge of the ServiceProvider entity.
func (sp *ServiceProvider) QueryUser() *UserQuery {
	return NewServiceProviderClient(sp.config).QueryUser(sp)
}

// Update returns a builder for updating this ServiceProvider.
// Note that you need to call ServiceProvider.Unwrap() before calling this method if this ServiceProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *ServiceProvider) Update() *ServiceProviderUpdateOne {
	return NewServiceProviderClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the ServiceProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *ServiceProvider) Unwrap() *ServiceProvider {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("generated: ServiceProvider is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *ServiceProvider) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.AccountID))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", sp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sp.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(sp.Email)
	builder.WriteString(", ")
	if v := sp.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sp.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(sp.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", sp.UUID))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceProviders is a parsable slice of ServiceProvider.
type ServiceProviders []*ServiceProvider
