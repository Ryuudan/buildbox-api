// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/account"
	"github.com/Pyakz/buildbox-api/ent/generated/plan"
	"github.com/Pyakz/buildbox-api/ent/generated/predicate"
	"github.com/Pyakz/buildbox-api/ent/generated/subscription"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetAccountID sets the "account_id" field.
func (su *SubscriptionUpdate) SetAccountID(i int) *SubscriptionUpdate {
	su.mutation.SetAccountID(i)
	return su
}

// SetPlanID sets the "plan_id" field.
func (su *SubscriptionUpdate) SetPlanID(i int) *SubscriptionUpdate {
	su.mutation.SetPlanID(i)
	return su
}

// SetStartDate sets the "start_date" field.
func (su *SubscriptionUpdate) SetStartDate(t time.Time) *SubscriptionUpdate {
	su.mutation.SetStartDate(t)
	return su
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStartDate(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetStartDate(*t)
	}
	return su
}

// SetEndDate sets the "end_date" field.
func (su *SubscriptionUpdate) SetEndDate(t time.Time) *SubscriptionUpdate {
	su.mutation.SetEndDate(t)
	return su
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableEndDate(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetEndDate(*t)
	}
	return su
}

// ClearEndDate clears the value of the "end_date" field.
func (su *SubscriptionUpdate) ClearEndDate() *SubscriptionUpdate {
	su.mutation.ClearEndDate()
	return su
}

// SetStatus sets the "status" field.
func (su *SubscriptionUpdate) SetStatus(s subscription.Status) *SubscriptionUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStatus(s *subscription.Status) *SubscriptionUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetBillingCycle sets the "billing_cycle" field.
func (su *SubscriptionUpdate) SetBillingCycle(sc subscription.BillingCycle) *SubscriptionUpdate {
	su.mutation.SetBillingCycle(sc)
	return su
}

// SetNillableBillingCycle sets the "billing_cycle" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableBillingCycle(sc *subscription.BillingCycle) *SubscriptionUpdate {
	if sc != nil {
		su.SetBillingCycle(*sc)
	}
	return su
}

// SetDiscount sets the "discount" field.
func (su *SubscriptionUpdate) SetDiscount(f float64) *SubscriptionUpdate {
	su.mutation.ResetDiscount()
	su.mutation.SetDiscount(f)
	return su
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableDiscount(f *float64) *SubscriptionUpdate {
	if f != nil {
		su.SetDiscount(*f)
	}
	return su
}

// AddDiscount adds f to the "discount" field.
func (su *SubscriptionUpdate) AddDiscount(f float64) *SubscriptionUpdate {
	su.mutation.AddDiscount(f)
	return su
}

// ClearDiscount clears the value of the "discount" field.
func (su *SubscriptionUpdate) ClearDiscount() *SubscriptionUpdate {
	su.mutation.ClearDiscount()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscriptionUpdate) SetUpdatedAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableUpdatedAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SubscriptionUpdate) ClearUpdatedAt() *SubscriptionUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetAccount sets the "account" edge to the Account entity.
func (su *SubscriptionUpdate) SetAccount(a *Account) *SubscriptionUpdate {
	return su.SetAccountID(a.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (su *SubscriptionUpdate) SetPlan(p *Plan) *SubscriptionUpdate {
	return su.SetPlanID(p.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (su *SubscriptionUpdate) ClearAccount() *SubscriptionUpdate {
	su.mutation.ClearAccount()
	return su
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (su *SubscriptionUpdate) ClearPlan() *SubscriptionUpdate {
	su.mutation.ClearPlan()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubscriptionUpdate) check() error {
	if v, ok := su.mutation.Status(); ok {
		if err := subscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Subscription.status": %w`, err)}
		}
	}
	if v, ok := su.mutation.BillingCycle(); ok {
		if err := subscription.BillingCycleValidator(v); err != nil {
			return &ValidationError{Name: "billing_cycle", err: fmt.Errorf(`generated: validator failed for field "Subscription.billing_cycle": %w`, err)}
		}
	}
	if _, ok := su.mutation.AccountID(); su.mutation.AccountCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Subscription.account"`)
	}
	if _, ok := su.mutation.PlanID(); su.mutation.PlanCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Subscription.plan"`)
	}
	return nil
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.StartDate(); ok {
		_spec.SetField(subscription.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := su.mutation.EndDate(); ok {
		_spec.SetField(subscription.FieldEndDate, field.TypeTime, value)
	}
	if su.mutation.EndDateCleared() {
		_spec.ClearField(subscription.FieldEndDate, field.TypeTime)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := su.mutation.BillingCycle(); ok {
		_spec.SetField(subscription.FieldBillingCycle, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Discount(); ok {
		_spec.SetField(subscription.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedDiscount(); ok {
		_spec.AddField(subscription.FieldDiscount, field.TypeFloat64, value)
	}
	if su.mutation.DiscountCleared() {
		_spec.ClearField(subscription.FieldDiscount, field.TypeFloat64)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(subscription.FieldUpdatedAt, field.TypeTime)
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(subscription.FieldCreatedAt, field.TypeTime)
	}
	if su.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.AccountTable,
			Columns: []string{subscription.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.AccountTable,
			Columns: []string{subscription.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlanTable,
			Columns: []string{subscription.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlanTable,
			Columns: []string{subscription.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetAccountID sets the "account_id" field.
func (suo *SubscriptionUpdateOne) SetAccountID(i int) *SubscriptionUpdateOne {
	suo.mutation.SetAccountID(i)
	return suo
}

// SetPlanID sets the "plan_id" field.
func (suo *SubscriptionUpdateOne) SetPlanID(i int) *SubscriptionUpdateOne {
	suo.mutation.SetPlanID(i)
	return suo
}

// SetStartDate sets the "start_date" field.
func (suo *SubscriptionUpdateOne) SetStartDate(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetStartDate(t)
	return suo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStartDate(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetStartDate(*t)
	}
	return suo
}

// SetEndDate sets the "end_date" field.
func (suo *SubscriptionUpdateOne) SetEndDate(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetEndDate(t)
	return suo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableEndDate(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetEndDate(*t)
	}
	return suo
}

// ClearEndDate clears the value of the "end_date" field.
func (suo *SubscriptionUpdateOne) ClearEndDate() *SubscriptionUpdateOne {
	suo.mutation.ClearEndDate()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubscriptionUpdateOne) SetStatus(s subscription.Status) *SubscriptionUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStatus(s *subscription.Status) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetBillingCycle sets the "billing_cycle" field.
func (suo *SubscriptionUpdateOne) SetBillingCycle(sc subscription.BillingCycle) *SubscriptionUpdateOne {
	suo.mutation.SetBillingCycle(sc)
	return suo
}

// SetNillableBillingCycle sets the "billing_cycle" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableBillingCycle(sc *subscription.BillingCycle) *SubscriptionUpdateOne {
	if sc != nil {
		suo.SetBillingCycle(*sc)
	}
	return suo
}

// SetDiscount sets the "discount" field.
func (suo *SubscriptionUpdateOne) SetDiscount(f float64) *SubscriptionUpdateOne {
	suo.mutation.ResetDiscount()
	suo.mutation.SetDiscount(f)
	return suo
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableDiscount(f *float64) *SubscriptionUpdateOne {
	if f != nil {
		suo.SetDiscount(*f)
	}
	return suo
}

// AddDiscount adds f to the "discount" field.
func (suo *SubscriptionUpdateOne) AddDiscount(f float64) *SubscriptionUpdateOne {
	suo.mutation.AddDiscount(f)
	return suo
}

// ClearDiscount clears the value of the "discount" field.
func (suo *SubscriptionUpdateOne) ClearDiscount() *SubscriptionUpdateOne {
	suo.mutation.ClearDiscount()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscriptionUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableUpdatedAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SubscriptionUpdateOne) ClearUpdatedAt() *SubscriptionUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetAccount sets the "account" edge to the Account entity.
func (suo *SubscriptionUpdateOne) SetAccount(a *Account) *SubscriptionUpdateOne {
	return suo.SetAccountID(a.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (suo *SubscriptionUpdateOne) SetPlan(p *Plan) *SubscriptionUpdateOne {
	return suo.SetPlanID(p.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (suo *SubscriptionUpdateOne) ClearAccount() *SubscriptionUpdateOne {
	suo.mutation.ClearAccount()
	return suo
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (suo *SubscriptionUpdateOne) ClearPlan() *SubscriptionUpdateOne {
	suo.mutation.ClearPlan()
	return suo
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubscriptionUpdateOne) check() error {
	if v, ok := suo.mutation.Status(); ok {
		if err := subscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Subscription.status": %w`, err)}
		}
	}
	if v, ok := suo.mutation.BillingCycle(); ok {
		if err := subscription.BillingCycleValidator(v); err != nil {
			return &ValidationError{Name: "billing_cycle", err: fmt.Errorf(`generated: validator failed for field "Subscription.billing_cycle": %w`, err)}
		}
	}
	if _, ok := suo.mutation.AccountID(); suo.mutation.AccountCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Subscription.account"`)
	}
	if _, ok := suo.mutation.PlanID(); suo.mutation.PlanCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Subscription.plan"`)
	}
	return nil
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.StartDate(); ok {
		_spec.SetField(subscription.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := suo.mutation.EndDate(); ok {
		_spec.SetField(subscription.FieldEndDate, field.TypeTime, value)
	}
	if suo.mutation.EndDateCleared() {
		_spec.ClearField(subscription.FieldEndDate, field.TypeTime)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.BillingCycle(); ok {
		_spec.SetField(subscription.FieldBillingCycle, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Discount(); ok {
		_spec.SetField(subscription.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedDiscount(); ok {
		_spec.AddField(subscription.FieldDiscount, field.TypeFloat64, value)
	}
	if suo.mutation.DiscountCleared() {
		_spec.ClearField(subscription.FieldDiscount, field.TypeFloat64)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(subscription.FieldUpdatedAt, field.TypeTime)
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(subscription.FieldCreatedAt, field.TypeTime)
	}
	if suo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.AccountTable,
			Columns: []string{subscription.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.AccountTable,
			Columns: []string{subscription.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlanTable,
			Columns: []string{subscription.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlanTable,
			Columns: []string{subscription.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
