// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/project"
	"github.com/Pyakz/buildbox-api/ent/generated/projectserviceprovider"
	"github.com/Pyakz/buildbox-api/ent/generated/serviceprovider"
	"github.com/google/uuid"
)

// ProjectServiceProviderCreate is the builder for creating a ProjectServiceProvider entity.
type ProjectServiceProviderCreate struct {
	config
	mutation *ProjectServiceProviderMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (pspc *ProjectServiceProviderCreate) SetCreatedBy(i int) *ProjectServiceProviderCreate {
	pspc.mutation.SetCreatedBy(i)
	return pspc
}

// SetProjectServiceProviderID sets the "project_service_provider_id" field.
func (pspc *ProjectServiceProviderCreate) SetProjectServiceProviderID(i int) *ProjectServiceProviderCreate {
	pspc.mutation.SetProjectServiceProviderID(i)
	return pspc
}

// SetNillableProjectServiceProviderID sets the "project_service_provider_id" field if the given value is not nil.
func (pspc *ProjectServiceProviderCreate) SetNillableProjectServiceProviderID(i *int) *ProjectServiceProviderCreate {
	if i != nil {
		pspc.SetProjectServiceProviderID(*i)
	}
	return pspc
}

// SetProjectProjectID sets the "project_project_id" field.
func (pspc *ProjectServiceProviderCreate) SetProjectProjectID(i int) *ProjectServiceProviderCreate {
	pspc.mutation.SetProjectProjectID(i)
	return pspc
}

// SetNillableProjectProjectID sets the "project_project_id" field if the given value is not nil.
func (pspc *ProjectServiceProviderCreate) SetNillableProjectProjectID(i *int) *ProjectServiceProviderCreate {
	if i != nil {
		pspc.SetProjectProjectID(*i)
	}
	return pspc
}

// SetUpdatedAt sets the "updated_at" field.
func (pspc *ProjectServiceProviderCreate) SetUpdatedAt(t time.Time) *ProjectServiceProviderCreate {
	pspc.mutation.SetUpdatedAt(t)
	return pspc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pspc *ProjectServiceProviderCreate) SetNillableUpdatedAt(t *time.Time) *ProjectServiceProviderCreate {
	if t != nil {
		pspc.SetUpdatedAt(*t)
	}
	return pspc
}

// SetCreatedAt sets the "created_at" field.
func (pspc *ProjectServiceProviderCreate) SetCreatedAt(t time.Time) *ProjectServiceProviderCreate {
	pspc.mutation.SetCreatedAt(t)
	return pspc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pspc *ProjectServiceProviderCreate) SetNillableCreatedAt(t *time.Time) *ProjectServiceProviderCreate {
	if t != nil {
		pspc.SetCreatedAt(*t)
	}
	return pspc
}

// SetUUID sets the "uuid" field.
func (pspc *ProjectServiceProviderCreate) SetUUID(u uuid.UUID) *ProjectServiceProviderCreate {
	pspc.mutation.SetUUID(u)
	return pspc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (pspc *ProjectServiceProviderCreate) SetNillableUUID(u *uuid.UUID) *ProjectServiceProviderCreate {
	if u != nil {
		pspc.SetUUID(*u)
	}
	return pspc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pspc *ProjectServiceProviderCreate) SetProjectID(id int) *ProjectServiceProviderCreate {
	pspc.mutation.SetProjectID(id)
	return pspc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (pspc *ProjectServiceProviderCreate) SetNillableProjectID(id *int) *ProjectServiceProviderCreate {
	if id != nil {
		pspc = pspc.SetProjectID(*id)
	}
	return pspc
}

// SetProject sets the "project" edge to the Project entity.
func (pspc *ProjectServiceProviderCreate) SetProject(p *Project) *ProjectServiceProviderCreate {
	return pspc.SetProjectID(p.ID)
}

// SetServiceProviderID sets the "service_provider" edge to the ServiceProvider entity by ID.
func (pspc *ProjectServiceProviderCreate) SetServiceProviderID(id int) *ProjectServiceProviderCreate {
	pspc.mutation.SetServiceProviderID(id)
	return pspc
}

// SetNillableServiceProviderID sets the "service_provider" edge to the ServiceProvider entity by ID if the given value is not nil.
func (pspc *ProjectServiceProviderCreate) SetNillableServiceProviderID(id *int) *ProjectServiceProviderCreate {
	if id != nil {
		pspc = pspc.SetServiceProviderID(*id)
	}
	return pspc
}

// SetServiceProvider sets the "service_provider" edge to the ServiceProvider entity.
func (pspc *ProjectServiceProviderCreate) SetServiceProvider(s *ServiceProvider) *ProjectServiceProviderCreate {
	return pspc.SetServiceProviderID(s.ID)
}

// Mutation returns the ProjectServiceProviderMutation object of the builder.
func (pspc *ProjectServiceProviderCreate) Mutation() *ProjectServiceProviderMutation {
	return pspc.mutation
}

// Save creates the ProjectServiceProvider in the database.
func (pspc *ProjectServiceProviderCreate) Save(ctx context.Context) (*ProjectServiceProvider, error) {
	pspc.defaults()
	return withHooks(ctx, pspc.sqlSave, pspc.mutation, pspc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pspc *ProjectServiceProviderCreate) SaveX(ctx context.Context) *ProjectServiceProvider {
	v, err := pspc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pspc *ProjectServiceProviderCreate) Exec(ctx context.Context) error {
	_, err := pspc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pspc *ProjectServiceProviderCreate) ExecX(ctx context.Context) {
	if err := pspc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pspc *ProjectServiceProviderCreate) defaults() {
	if _, ok := pspc.mutation.UpdatedAt(); !ok {
		v := projectserviceprovider.DefaultUpdatedAt()
		pspc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pspc.mutation.CreatedAt(); !ok {
		v := projectserviceprovider.DefaultCreatedAt()
		pspc.mutation.SetCreatedAt(v)
	}
	if _, ok := pspc.mutation.UUID(); !ok {
		v := projectserviceprovider.DefaultUUID()
		pspc.mutation.SetUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pspc *ProjectServiceProviderCreate) check() error {
	if _, ok := pspc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`generated: missing required field "ProjectServiceProvider.created_by"`)}
	}
	if _, ok := pspc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`generated: missing required field "ProjectServiceProvider.uuid"`)}
	}
	return nil
}

func (pspc *ProjectServiceProviderCreate) sqlSave(ctx context.Context) (*ProjectServiceProvider, error) {
	if err := pspc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pspc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pspc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pspc.mutation.id = &_node.ID
	pspc.mutation.done = true
	return _node, nil
}

func (pspc *ProjectServiceProviderCreate) createSpec() (*ProjectServiceProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectServiceProvider{config: pspc.config}
		_spec = sqlgraph.NewCreateSpec(projectserviceprovider.Table, sqlgraph.NewFieldSpec(projectserviceprovider.FieldID, field.TypeInt))
	)
	if value, ok := pspc.mutation.CreatedBy(); ok {
		_spec.SetField(projectserviceprovider.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := pspc.mutation.UpdatedAt(); ok {
		_spec.SetField(projectserviceprovider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pspc.mutation.CreatedAt(); ok {
		_spec.SetField(projectserviceprovider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pspc.mutation.UUID(); ok {
		_spec.SetField(projectserviceprovider.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if nodes := pspc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ProjectTable,
			Columns: []string{projectserviceprovider.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pspc.mutation.ServiceProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectserviceprovider.ServiceProviderTable,
			Columns: []string{projectserviceprovider.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceprovider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectServiceProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectServiceProviderCreateBulk is the builder for creating many ProjectServiceProvider entities in bulk.
type ProjectServiceProviderCreateBulk struct {
	config
	err      error
	builders []*ProjectServiceProviderCreate
}

// Save creates the ProjectServiceProvider entities in the database.
func (pspcb *ProjectServiceProviderCreateBulk) Save(ctx context.Context) ([]*ProjectServiceProvider, error) {
	if pspcb.err != nil {
		return nil, pspcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pspcb.builders))
	nodes := make([]*ProjectServiceProvider, len(pspcb.builders))
	mutators := make([]Mutator, len(pspcb.builders))
	for i := range pspcb.builders {
		func(i int, root context.Context) {
			builder := pspcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectServiceProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pspcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pspcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pspcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pspcb *ProjectServiceProviderCreateBulk) SaveX(ctx context.Context) []*ProjectServiceProvider {
	v, err := pspcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pspcb *ProjectServiceProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := pspcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pspcb *ProjectServiceProviderCreateBulk) ExecX(ctx context.Context) {
	if err := pspcb.Exec(ctx); err != nil {
		panic(err)
	}
}
