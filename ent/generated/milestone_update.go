// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/account"
	"github.com/Pyakz/buildbox-api/ent/generated/milestone"
	"github.com/Pyakz/buildbox-api/ent/generated/predicate"
	"github.com/Pyakz/buildbox-api/ent/generated/project"
	"github.com/Pyakz/buildbox-api/ent/generated/task"
	"github.com/Pyakz/buildbox-api/ent/generated/user"
)

// MilestoneUpdate is the builder for updating Milestone entities.
type MilestoneUpdate struct {
	config
	hooks    []Hook
	mutation *MilestoneMutation
}

// Where appends a list predicates to the MilestoneUpdate builder.
func (mu *MilestoneUpdate) Where(ps ...predicate.Milestone) *MilestoneUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetAccountID sets the "account_id" field.
func (mu *MilestoneUpdate) SetAccountID(i int) *MilestoneUpdate {
	mu.mutation.SetAccountID(i)
	return mu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (mu *MilestoneUpdate) SetNillableAccountID(i *int) *MilestoneUpdate {
	if i != nil {
		mu.SetAccountID(*i)
	}
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *MilestoneUpdate) SetCreatedBy(i int) *MilestoneUpdate {
	mu.mutation.SetCreatedBy(i)
	return mu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mu *MilestoneUpdate) SetNillableCreatedBy(i *int) *MilestoneUpdate {
	if i != nil {
		mu.SetCreatedBy(*i)
	}
	return mu
}

// SetProjectID sets the "project_id" field.
func (mu *MilestoneUpdate) SetProjectID(i int) *MilestoneUpdate {
	mu.mutation.SetProjectID(i)
	return mu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (mu *MilestoneUpdate) SetNillableProjectID(i *int) *MilestoneUpdate {
	if i != nil {
		mu.SetProjectID(*i)
	}
	return mu
}

// SetTitle sets the "title" field.
func (mu *MilestoneUpdate) SetTitle(s string) *MilestoneUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MilestoneUpdate) SetNillableTitle(s *string) *MilestoneUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetDescription sets the "description" field.
func (mu *MilestoneUpdate) SetDescription(s string) *MilestoneUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MilestoneUpdate) SetNillableDescription(s *string) *MilestoneUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// SetEndDate sets the "end_date" field.
func (mu *MilestoneUpdate) SetEndDate(t time.Time) *MilestoneUpdate {
	mu.mutation.SetEndDate(t)
	return mu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (mu *MilestoneUpdate) SetNillableEndDate(t *time.Time) *MilestoneUpdate {
	if t != nil {
		mu.SetEndDate(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MilestoneUpdate) SetUpdatedAt(t time.Time) *MilestoneUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mu *MilestoneUpdate) SetNillableUpdatedAt(t *time.Time) *MilestoneUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// SetDeleted sets the "deleted" field.
func (mu *MilestoneUpdate) SetDeleted(b bool) *MilestoneUpdate {
	mu.mutation.SetDeleted(b)
	return mu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (mu *MilestoneUpdate) SetNillableDeleted(b *bool) *MilestoneUpdate {
	if b != nil {
		mu.SetDeleted(*b)
	}
	return mu
}

// ClearDeleted clears the value of the "deleted" field.
func (mu *MilestoneUpdate) ClearDeleted() *MilestoneUpdate {
	mu.mutation.ClearDeleted()
	return mu
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (mu *MilestoneUpdate) AddTaskIDs(ids ...int) *MilestoneUpdate {
	mu.mutation.AddTaskIDs(ids...)
	return mu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (mu *MilestoneUpdate) AddTasks(t ...*Task) *MilestoneUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTaskIDs(ids...)
}

// SetAccount sets the "account" edge to the Account entity.
func (mu *MilestoneUpdate) SetAccount(a *Account) *MilestoneUpdate {
	return mu.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MilestoneUpdate) SetUserID(id int) *MilestoneUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MilestoneUpdate) SetUser(u *User) *MilestoneUpdate {
	return mu.SetUserID(u.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (mu *MilestoneUpdate) SetProject(p *Project) *MilestoneUpdate {
	return mu.SetProjectID(p.ID)
}

// Mutation returns the MilestoneMutation object of the builder.
func (mu *MilestoneUpdate) Mutation() *MilestoneMutation {
	return mu.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (mu *MilestoneUpdate) ClearTasks() *MilestoneUpdate {
	mu.mutation.ClearTasks()
	return mu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (mu *MilestoneUpdate) RemoveTaskIDs(ids ...int) *MilestoneUpdate {
	mu.mutation.RemoveTaskIDs(ids...)
	return mu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (mu *MilestoneUpdate) RemoveTasks(t ...*Task) *MilestoneUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTaskIDs(ids...)
}

// ClearAccount clears the "account" edge to the Account entity.
func (mu *MilestoneUpdate) ClearAccount() *MilestoneUpdate {
	mu.mutation.ClearAccount()
	return mu
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MilestoneUpdate) ClearUser() *MilestoneUpdate {
	mu.mutation.ClearUser()
	return mu
}

// ClearProject clears the "project" edge to the Project entity.
func (mu *MilestoneUpdate) ClearProject() *MilestoneUpdate {
	mu.mutation.ClearProject()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MilestoneUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MilestoneUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MilestoneUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MilestoneUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MilestoneUpdate) check() error {
	if v, ok := mu.mutation.Title(); ok {
		if err := milestone.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Milestone.title": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Description(); ok {
		if err := milestone.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Milestone.description": %w`, err)}
		}
	}
	if _, ok := mu.mutation.AccountID(); mu.mutation.AccountCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Milestone.account"`)
	}
	if _, ok := mu.mutation.UserID(); mu.mutation.UserCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Milestone.user"`)
	}
	if _, ok := mu.mutation.ProjectID(); mu.mutation.ProjectCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Milestone.project"`)
	}
	return nil
}

func (mu *MilestoneUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(milestone.Table, milestone.Columns, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(milestone.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(milestone.FieldDescription, field.TypeString, value)
	}
	if value, ok := mu.mutation.EndDate(); ok {
		_spec.SetField(milestone.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(milestone.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Deleted(); ok {
		_spec.SetField(milestone.FieldDeleted, field.TypeBool, value)
	}
	if mu.mutation.DeletedCleared() {
		_spec.ClearField(milestone.FieldDeleted, field.TypeBool)
	}
	if mu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.TasksTable,
			Columns: []string{milestone.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !mu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.TasksTable,
			Columns: []string{milestone.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.TasksTable,
			Columns: []string{milestone.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.AccountTable,
			Columns: []string{milestone.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.AccountTable,
			Columns: []string{milestone.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.UserTable,
			Columns: []string{milestone.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.UserTable,
			Columns: []string{milestone.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.ProjectTable,
			Columns: []string{milestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.ProjectTable,
			Columns: []string{milestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{milestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MilestoneUpdateOne is the builder for updating a single Milestone entity.
type MilestoneUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MilestoneMutation
}

// SetAccountID sets the "account_id" field.
func (muo *MilestoneUpdateOne) SetAccountID(i int) *MilestoneUpdateOne {
	muo.mutation.SetAccountID(i)
	return muo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (muo *MilestoneUpdateOne) SetNillableAccountID(i *int) *MilestoneUpdateOne {
	if i != nil {
		muo.SetAccountID(*i)
	}
	return muo
}

// SetCreatedBy sets the "created_by" field.
func (muo *MilestoneUpdateOne) SetCreatedBy(i int) *MilestoneUpdateOne {
	muo.mutation.SetCreatedBy(i)
	return muo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (muo *MilestoneUpdateOne) SetNillableCreatedBy(i *int) *MilestoneUpdateOne {
	if i != nil {
		muo.SetCreatedBy(*i)
	}
	return muo
}

// SetProjectID sets the "project_id" field.
func (muo *MilestoneUpdateOne) SetProjectID(i int) *MilestoneUpdateOne {
	muo.mutation.SetProjectID(i)
	return muo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (muo *MilestoneUpdateOne) SetNillableProjectID(i *int) *MilestoneUpdateOne {
	if i != nil {
		muo.SetProjectID(*i)
	}
	return muo
}

// SetTitle sets the "title" field.
func (muo *MilestoneUpdateOne) SetTitle(s string) *MilestoneUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MilestoneUpdateOne) SetNillableTitle(s *string) *MilestoneUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetDescription sets the "description" field.
func (muo *MilestoneUpdateOne) SetDescription(s string) *MilestoneUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MilestoneUpdateOne) SetNillableDescription(s *string) *MilestoneUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// SetEndDate sets the "end_date" field.
func (muo *MilestoneUpdateOne) SetEndDate(t time.Time) *MilestoneUpdateOne {
	muo.mutation.SetEndDate(t)
	return muo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (muo *MilestoneUpdateOne) SetNillableEndDate(t *time.Time) *MilestoneUpdateOne {
	if t != nil {
		muo.SetEndDate(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MilestoneUpdateOne) SetUpdatedAt(t time.Time) *MilestoneUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muo *MilestoneUpdateOne) SetNillableUpdatedAt(t *time.Time) *MilestoneUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// SetDeleted sets the "deleted" field.
func (muo *MilestoneUpdateOne) SetDeleted(b bool) *MilestoneUpdateOne {
	muo.mutation.SetDeleted(b)
	return muo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (muo *MilestoneUpdateOne) SetNillableDeleted(b *bool) *MilestoneUpdateOne {
	if b != nil {
		muo.SetDeleted(*b)
	}
	return muo
}

// ClearDeleted clears the value of the "deleted" field.
func (muo *MilestoneUpdateOne) ClearDeleted() *MilestoneUpdateOne {
	muo.mutation.ClearDeleted()
	return muo
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (muo *MilestoneUpdateOne) AddTaskIDs(ids ...int) *MilestoneUpdateOne {
	muo.mutation.AddTaskIDs(ids...)
	return muo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (muo *MilestoneUpdateOne) AddTasks(t ...*Task) *MilestoneUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTaskIDs(ids...)
}

// SetAccount sets the "account" edge to the Account entity.
func (muo *MilestoneUpdateOne) SetAccount(a *Account) *MilestoneUpdateOne {
	return muo.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MilestoneUpdateOne) SetUserID(id int) *MilestoneUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MilestoneUpdateOne) SetUser(u *User) *MilestoneUpdateOne {
	return muo.SetUserID(u.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (muo *MilestoneUpdateOne) SetProject(p *Project) *MilestoneUpdateOne {
	return muo.SetProjectID(p.ID)
}

// Mutation returns the MilestoneMutation object of the builder.
func (muo *MilestoneUpdateOne) Mutation() *MilestoneMutation {
	return muo.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (muo *MilestoneUpdateOne) ClearTasks() *MilestoneUpdateOne {
	muo.mutation.ClearTasks()
	return muo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (muo *MilestoneUpdateOne) RemoveTaskIDs(ids ...int) *MilestoneUpdateOne {
	muo.mutation.RemoveTaskIDs(ids...)
	return muo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (muo *MilestoneUpdateOne) RemoveTasks(t ...*Task) *MilestoneUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTaskIDs(ids...)
}

// ClearAccount clears the "account" edge to the Account entity.
func (muo *MilestoneUpdateOne) ClearAccount() *MilestoneUpdateOne {
	muo.mutation.ClearAccount()
	return muo
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MilestoneUpdateOne) ClearUser() *MilestoneUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// ClearProject clears the "project" edge to the Project entity.
func (muo *MilestoneUpdateOne) ClearProject() *MilestoneUpdateOne {
	muo.mutation.ClearProject()
	return muo
}

// Where appends a list predicates to the MilestoneUpdate builder.
func (muo *MilestoneUpdateOne) Where(ps ...predicate.Milestone) *MilestoneUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MilestoneUpdateOne) Select(field string, fields ...string) *MilestoneUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Milestone entity.
func (muo *MilestoneUpdateOne) Save(ctx context.Context) (*Milestone, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MilestoneUpdateOne) SaveX(ctx context.Context) *Milestone {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MilestoneUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MilestoneUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MilestoneUpdateOne) check() error {
	if v, ok := muo.mutation.Title(); ok {
		if err := milestone.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Milestone.title": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Description(); ok {
		if err := milestone.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Milestone.description": %w`, err)}
		}
	}
	if _, ok := muo.mutation.AccountID(); muo.mutation.AccountCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Milestone.account"`)
	}
	if _, ok := muo.mutation.UserID(); muo.mutation.UserCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Milestone.user"`)
	}
	if _, ok := muo.mutation.ProjectID(); muo.mutation.ProjectCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Milestone.project"`)
	}
	return nil
}

func (muo *MilestoneUpdateOne) sqlSave(ctx context.Context) (_node *Milestone, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(milestone.Table, milestone.Columns, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Milestone.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, milestone.FieldID)
		for _, f := range fields {
			if !milestone.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != milestone.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(milestone.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(milestone.FieldDescription, field.TypeString, value)
	}
	if value, ok := muo.mutation.EndDate(); ok {
		_spec.SetField(milestone.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(milestone.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Deleted(); ok {
		_spec.SetField(milestone.FieldDeleted, field.TypeBool, value)
	}
	if muo.mutation.DeletedCleared() {
		_spec.ClearField(milestone.FieldDeleted, field.TypeBool)
	}
	if muo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.TasksTable,
			Columns: []string{milestone.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !muo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.TasksTable,
			Columns: []string{milestone.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.TasksTable,
			Columns: []string{milestone.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.AccountTable,
			Columns: []string{milestone.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.AccountTable,
			Columns: []string{milestone.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.UserTable,
			Columns: []string{milestone.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.UserTable,
			Columns: []string{milestone.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.ProjectTable,
			Columns: []string{milestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.ProjectTable,
			Columns: []string{milestone.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Milestone{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{milestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
