// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/serviceproviderprojects"
	"github.com/google/uuid"
)

// ServiceProviderProjectsCreate is the builder for creating a ServiceProviderProjects entity.
type ServiceProviderProjectsCreate struct {
	config
	mutation *ServiceProviderProjectsMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (sppc *ServiceProviderProjectsCreate) SetCreatedBy(i int) *ServiceProviderProjectsCreate {
	sppc.mutation.SetCreatedBy(i)
	return sppc
}

// SetProjectServiceProviderID sets the "project_service_provider_id" field.
func (sppc *ServiceProviderProjectsCreate) SetProjectServiceProviderID(i int) *ServiceProviderProjectsCreate {
	sppc.mutation.SetProjectServiceProviderID(i)
	return sppc
}

// SetNillableProjectServiceProviderID sets the "project_service_provider_id" field if the given value is not nil.
func (sppc *ServiceProviderProjectsCreate) SetNillableProjectServiceProviderID(i *int) *ServiceProviderProjectsCreate {
	if i != nil {
		sppc.SetProjectServiceProviderID(*i)
	}
	return sppc
}

// SetProjectProjectID sets the "project_project_id" field.
func (sppc *ServiceProviderProjectsCreate) SetProjectProjectID(i int) *ServiceProviderProjectsCreate {
	sppc.mutation.SetProjectProjectID(i)
	return sppc
}

// SetNillableProjectProjectID sets the "project_project_id" field if the given value is not nil.
func (sppc *ServiceProviderProjectsCreate) SetNillableProjectProjectID(i *int) *ServiceProviderProjectsCreate {
	if i != nil {
		sppc.SetProjectProjectID(*i)
	}
	return sppc
}

// SetUpdatedAt sets the "updated_at" field.
func (sppc *ServiceProviderProjectsCreate) SetUpdatedAt(t time.Time) *ServiceProviderProjectsCreate {
	sppc.mutation.SetUpdatedAt(t)
	return sppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sppc *ServiceProviderProjectsCreate) SetNillableUpdatedAt(t *time.Time) *ServiceProviderProjectsCreate {
	if t != nil {
		sppc.SetUpdatedAt(*t)
	}
	return sppc
}

// SetCreatedAt sets the "created_at" field.
func (sppc *ServiceProviderProjectsCreate) SetCreatedAt(t time.Time) *ServiceProviderProjectsCreate {
	sppc.mutation.SetCreatedAt(t)
	return sppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sppc *ServiceProviderProjectsCreate) SetNillableCreatedAt(t *time.Time) *ServiceProviderProjectsCreate {
	if t != nil {
		sppc.SetCreatedAt(*t)
	}
	return sppc
}

// SetUUID sets the "uuid" field.
func (sppc *ServiceProviderProjectsCreate) SetUUID(u uuid.UUID) *ServiceProviderProjectsCreate {
	sppc.mutation.SetUUID(u)
	return sppc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (sppc *ServiceProviderProjectsCreate) SetNillableUUID(u *uuid.UUID) *ServiceProviderProjectsCreate {
	if u != nil {
		sppc.SetUUID(*u)
	}
	return sppc
}

// Mutation returns the ServiceProviderProjectsMutation object of the builder.
func (sppc *ServiceProviderProjectsCreate) Mutation() *ServiceProviderProjectsMutation {
	return sppc.mutation
}

// Save creates the ServiceProviderProjects in the database.
func (sppc *ServiceProviderProjectsCreate) Save(ctx context.Context) (*ServiceProviderProjects, error) {
	sppc.defaults()
	return withHooks(ctx, sppc.sqlSave, sppc.mutation, sppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sppc *ServiceProviderProjectsCreate) SaveX(ctx context.Context) *ServiceProviderProjects {
	v, err := sppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sppc *ServiceProviderProjectsCreate) Exec(ctx context.Context) error {
	_, err := sppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sppc *ServiceProviderProjectsCreate) ExecX(ctx context.Context) {
	if err := sppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sppc *ServiceProviderProjectsCreate) defaults() {
	if _, ok := sppc.mutation.UpdatedAt(); !ok {
		v := serviceproviderprojects.DefaultUpdatedAt()
		sppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sppc.mutation.CreatedAt(); !ok {
		v := serviceproviderprojects.DefaultCreatedAt()
		sppc.mutation.SetCreatedAt(v)
	}
	if _, ok := sppc.mutation.UUID(); !ok {
		v := serviceproviderprojects.DefaultUUID()
		sppc.mutation.SetUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sppc *ServiceProviderProjectsCreate) check() error {
	if _, ok := sppc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`generated: missing required field "ServiceProviderProjects.created_by"`)}
	}
	if _, ok := sppc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`generated: missing required field "ServiceProviderProjects.uuid"`)}
	}
	return nil
}

func (sppc *ServiceProviderProjectsCreate) sqlSave(ctx context.Context) (*ServiceProviderProjects, error) {
	if err := sppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sppc.mutation.id = &_node.ID
	sppc.mutation.done = true
	return _node, nil
}

func (sppc *ServiceProviderProjectsCreate) createSpec() (*ServiceProviderProjects, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceProviderProjects{config: sppc.config}
		_spec = sqlgraph.NewCreateSpec(serviceproviderprojects.Table, sqlgraph.NewFieldSpec(serviceproviderprojects.FieldID, field.TypeInt))
	)
	if value, ok := sppc.mutation.CreatedBy(); ok {
		_spec.SetField(serviceproviderprojects.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := sppc.mutation.ProjectServiceProviderID(); ok {
		_spec.SetField(serviceproviderprojects.FieldProjectServiceProviderID, field.TypeInt, value)
		_node.ProjectServiceProviderID = value
	}
	if value, ok := sppc.mutation.ProjectProjectID(); ok {
		_spec.SetField(serviceproviderprojects.FieldProjectProjectID, field.TypeInt, value)
		_node.ProjectProjectID = value
	}
	if value, ok := sppc.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceproviderprojects.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sppc.mutation.CreatedAt(); ok {
		_spec.SetField(serviceproviderprojects.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sppc.mutation.UUID(); ok {
		_spec.SetField(serviceproviderprojects.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	return _node, _spec
}

// ServiceProviderProjectsCreateBulk is the builder for creating many ServiceProviderProjects entities in bulk.
type ServiceProviderProjectsCreateBulk struct {
	config
	err      error
	builders []*ServiceProviderProjectsCreate
}

// Save creates the ServiceProviderProjects entities in the database.
func (sppcb *ServiceProviderProjectsCreateBulk) Save(ctx context.Context) ([]*ServiceProviderProjects, error) {
	if sppcb.err != nil {
		return nil, sppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sppcb.builders))
	nodes := make([]*ServiceProviderProjects, len(sppcb.builders))
	mutators := make([]Mutator, len(sppcb.builders))
	for i := range sppcb.builders {
		func(i int, root context.Context) {
			builder := sppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceProviderProjectsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sppcb *ServiceProviderProjectsCreateBulk) SaveX(ctx context.Context) []*ServiceProviderProjects {
	v, err := sppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sppcb *ServiceProviderProjectsCreateBulk) Exec(ctx context.Context) error {
	_, err := sppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sppcb *ServiceProviderProjectsCreateBulk) ExecX(ctx context.Context) {
	if err := sppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
