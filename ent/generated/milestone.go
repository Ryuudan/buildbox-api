// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pyakz/buildbox-api/ent/generated/account"
	"github.com/Pyakz/buildbox-api/ent/generated/milestone"
	"github.com/Pyakz/buildbox-api/ent/generated/project"
	"github.com/Pyakz/buildbox-api/ent/generated/user"
	"github.com/google/uuid"
)

// Milestone is the model entity for the Milestone schema.
type Milestone struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int `json:"account_id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID int `json:"project_id,omitempty" validate:"required"`
	// Title holds the value of the "title" field.
	Title string `json:"title" validate:"required,min=1,max=100"`
	// Description holds the value of the "description" field.
	Description string `json:"description" validate:"required,min=1,max=100"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date" validate:"required,gtfield=CreatedAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MilestoneQuery when eager-loading is set.
	Edges        MilestoneEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MilestoneEdges holds the relations/edges for other nodes in the graph.
type MilestoneEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e MilestoneEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MilestoneEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[1] {
		if e.Account == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MilestoneEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MilestoneEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[3] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Milestone) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case milestone.FieldDeleted:
			values[i] = new(sql.NullBool)
		case milestone.FieldID, milestone.FieldAccountID, milestone.FieldCreatedBy, milestone.FieldProjectID:
			values[i] = new(sql.NullInt64)
		case milestone.FieldTitle, milestone.FieldDescription:
			values[i] = new(sql.NullString)
		case milestone.FieldEndDate, milestone.FieldUpdatedAt, milestone.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case milestone.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Milestone fields.
func (m *Milestone) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case milestone.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case milestone.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				m.AccountID = int(value.Int64)
			}
		case milestone.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				m.CreatedBy = int(value.Int64)
			}
		case milestone.FieldProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				m.ProjectID = int(value.Int64)
			}
		case milestone.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case milestone.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case milestone.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				m.EndDate = value.Time
			}
		case milestone.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case milestone.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case milestone.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				m.Deleted = value.Bool
			}
		case milestone.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				m.UUID = *value
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Milestone.
// This includes values selected through modifiers, order, etc.
func (m *Milestone) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryTasks queries the "tasks" edge of the Milestone entity.
func (m *Milestone) QueryTasks() *TaskQuery {
	return NewMilestoneClient(m.config).QueryTasks(m)
}

// QueryAccount queries the "account" edge of the Milestone entity.
func (m *Milestone) QueryAccount() *AccountQuery {
	return NewMilestoneClient(m.config).QueryAccount(m)
}

// QueryUser queries the "user" edge of the Milestone entity.
func (m *Milestone) QueryUser() *UserQuery {
	return NewMilestoneClient(m.config).QueryUser(m)
}

// QueryProject queries the "project" edge of the Milestone entity.
func (m *Milestone) QueryProject() *ProjectQuery {
	return NewMilestoneClient(m.config).QueryProject(m)
}

// Update returns a builder for updating this Milestone.
// Note that you need to call Milestone.Unwrap() before calling this method if this Milestone
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Milestone) Update() *MilestoneUpdateOne {
	return NewMilestoneClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Milestone entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Milestone) Unwrap() *Milestone {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Milestone is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Milestone) String() string {
	var builder strings.Builder
	builder.WriteString("Milestone(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", m.AccountID))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", m.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(m.Description)
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(m.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", m.Deleted))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", m.UUID))
	builder.WriteByte(')')
	return builder.String()
}

// Milestones is a parsable slice of Milestone.
type Milestones []*Milestone
