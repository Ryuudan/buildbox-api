// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/account"
	"github.com/Pyakz/buildbox-api/ent/generated/milestone"
	"github.com/Pyakz/buildbox-api/ent/generated/predicate"
	"github.com/Pyakz/buildbox-api/ent/generated/project"
	"github.com/Pyakz/buildbox-api/ent/generated/task"
	"github.com/Pyakz/buildbox-api/ent/generated/user"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAccountID sets the "account_id" field.
func (tu *TaskUpdate) SetAccountID(i int) *TaskUpdate {
	tu.mutation.SetAccountID(i)
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TaskUpdate) SetCreatedBy(i int) *TaskUpdate {
	tu.mutation.SetCreatedBy(i)
	return tu
}

// SetProjectID sets the "project_id" field.
func (tu *TaskUpdate) SetProjectID(i int) *TaskUpdate {
	tu.mutation.SetProjectID(i)
	return tu
}

// SetTaskMilestoneID sets the "task_milestone_id" field.
func (tu *TaskUpdate) SetTaskMilestoneID(i int) *TaskUpdate {
	tu.mutation.SetTaskMilestoneID(i)
	return tu
}

// SetNillableTaskMilestoneID sets the "task_milestone_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTaskMilestoneID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetTaskMilestoneID(*i)
	}
	return tu
}

// ClearTaskMilestoneID clears the value of the "task_milestone_id" field.
func (tu *TaskUpdate) ClearTaskMilestoneID() *TaskUpdate {
	tu.mutation.ClearTaskMilestoneID()
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// SetDeleted sets the "deleted" field.
func (tu *TaskUpdate) SetDeleted(b bool) *TaskUpdate {
	tu.mutation.SetDeleted(b)
	return tu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeleted(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetDeleted(*b)
	}
	return tu
}

// ClearDeleted clears the value of the "deleted" field.
func (tu *TaskUpdate) ClearDeleted() *TaskUpdate {
	tu.mutation.ClearDeleted()
	return tu
}

// SetAccount sets the "account" edge to the Account entity.
func (tu *TaskUpdate) SetAccount(a *Account) *TaskUpdate {
	return tu.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tu *TaskUpdate) SetUserID(id int) *TaskUpdate {
	tu.mutation.SetUserID(id)
	return tu
}

// SetUser sets the "user" edge to the User entity.
func (tu *TaskUpdate) SetUser(u *User) *TaskUpdate {
	return tu.SetUserID(u.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (tu *TaskUpdate) SetProject(p *Project) *TaskUpdate {
	return tu.SetProjectID(p.ID)
}

// SetMilestoneID sets the "milestone" edge to the Milestone entity by ID.
func (tu *TaskUpdate) SetMilestoneID(id int) *TaskUpdate {
	tu.mutation.SetMilestoneID(id)
	return tu
}

// SetNillableMilestoneID sets the "milestone" edge to the Milestone entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableMilestoneID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetMilestoneID(*id)
	}
	return tu
}

// SetMilestone sets the "milestone" edge to the Milestone entity.
func (tu *TaskUpdate) SetMilestone(m *Milestone) *TaskUpdate {
	return tu.SetMilestoneID(m.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (tu *TaskUpdate) ClearAccount() *TaskUpdate {
	tu.mutation.ClearAccount()
	return tu
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TaskUpdate) ClearUser() *TaskUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearProject clears the "project" edge to the Project entity.
func (tu *TaskUpdate) ClearProject() *TaskUpdate {
	tu.mutation.ClearProject()
	return tu
}

// ClearMilestone clears the "milestone" edge to the Milestone entity.
func (tu *TaskUpdate) ClearMilestone() *TaskUpdate {
	tu.mutation.ClearMilestone()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := task.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Task.description": %w`, err)}
		}
	}
	if _, ok := tu.mutation.AccountID(); tu.mutation.AccountCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Task.account"`)
	}
	if _, ok := tu.mutation.UserID(); tu.mutation.UserCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Task.user"`)
	}
	if _, ok := tu.mutation.ProjectID(); tu.mutation.ProjectCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Task.project"`)
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Deleted(); ok {
		_spec.SetField(task.FieldDeleted, field.TypeBool, value)
	}
	if tu.mutation.DeletedCleared() {
		_spec.ClearField(task.FieldDeleted, field.TypeBool)
	}
	if tu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AccountTable,
			Columns: []string{task.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AccountTable,
			Columns: []string{task.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UserTable,
			Columns: []string{task.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UserTable,
			Columns: []string{task.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.MilestoneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.MilestoneTable,
			Columns: []string{task.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.MilestoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.MilestoneTable,
			Columns: []string{task.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetAccountID sets the "account_id" field.
func (tuo *TaskUpdateOne) SetAccountID(i int) *TaskUpdateOne {
	tuo.mutation.SetAccountID(i)
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TaskUpdateOne) SetCreatedBy(i int) *TaskUpdateOne {
	tuo.mutation.SetCreatedBy(i)
	return tuo
}

// SetProjectID sets the "project_id" field.
func (tuo *TaskUpdateOne) SetProjectID(i int) *TaskUpdateOne {
	tuo.mutation.SetProjectID(i)
	return tuo
}

// SetTaskMilestoneID sets the "task_milestone_id" field.
func (tuo *TaskUpdateOne) SetTaskMilestoneID(i int) *TaskUpdateOne {
	tuo.mutation.SetTaskMilestoneID(i)
	return tuo
}

// SetNillableTaskMilestoneID sets the "task_milestone_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTaskMilestoneID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetTaskMilestoneID(*i)
	}
	return tuo
}

// ClearTaskMilestoneID clears the value of the "task_milestone_id" field.
func (tuo *TaskUpdateOne) ClearTaskMilestoneID() *TaskUpdateOne {
	tuo.mutation.ClearTaskMilestoneID()
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// SetDeleted sets the "deleted" field.
func (tuo *TaskUpdateOne) SetDeleted(b bool) *TaskUpdateOne {
	tuo.mutation.SetDeleted(b)
	return tuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeleted(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetDeleted(*b)
	}
	return tuo
}

// ClearDeleted clears the value of the "deleted" field.
func (tuo *TaskUpdateOne) ClearDeleted() *TaskUpdateOne {
	tuo.mutation.ClearDeleted()
	return tuo
}

// SetAccount sets the "account" edge to the Account entity.
func (tuo *TaskUpdateOne) SetAccount(a *Account) *TaskUpdateOne {
	return tuo.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tuo *TaskUpdateOne) SetUserID(id int) *TaskUpdateOne {
	tuo.mutation.SetUserID(id)
	return tuo
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TaskUpdateOne) SetUser(u *User) *TaskUpdateOne {
	return tuo.SetUserID(u.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (tuo *TaskUpdateOne) SetProject(p *Project) *TaskUpdateOne {
	return tuo.SetProjectID(p.ID)
}

// SetMilestoneID sets the "milestone" edge to the Milestone entity by ID.
func (tuo *TaskUpdateOne) SetMilestoneID(id int) *TaskUpdateOne {
	tuo.mutation.SetMilestoneID(id)
	return tuo
}

// SetNillableMilestoneID sets the "milestone" edge to the Milestone entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableMilestoneID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetMilestoneID(*id)
	}
	return tuo
}

// SetMilestone sets the "milestone" edge to the Milestone entity.
func (tuo *TaskUpdateOne) SetMilestone(m *Milestone) *TaskUpdateOne {
	return tuo.SetMilestoneID(m.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (tuo *TaskUpdateOne) ClearAccount() *TaskUpdateOne {
	tuo.mutation.ClearAccount()
	return tuo
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TaskUpdateOne) ClearUser() *TaskUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearProject clears the "project" edge to the Project entity.
func (tuo *TaskUpdateOne) ClearProject() *TaskUpdateOne {
	tuo.mutation.ClearProject()
	return tuo
}

// ClearMilestone clears the "milestone" edge to the Milestone entity.
func (tuo *TaskUpdateOne) ClearMilestone() *TaskUpdateOne {
	tuo.mutation.ClearMilestone()
	return tuo
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := task.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Task.description": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.AccountID(); tuo.mutation.AccountCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Task.account"`)
	}
	if _, ok := tuo.mutation.UserID(); tuo.mutation.UserCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Task.user"`)
	}
	if _, ok := tuo.mutation.ProjectID(); tuo.mutation.ProjectCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Task.project"`)
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Deleted(); ok {
		_spec.SetField(task.FieldDeleted, field.TypeBool, value)
	}
	if tuo.mutation.DeletedCleared() {
		_spec.ClearField(task.FieldDeleted, field.TypeBool)
	}
	if tuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AccountTable,
			Columns: []string{task.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AccountTable,
			Columns: []string{task.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UserTable,
			Columns: []string{task.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UserTable,
			Columns: []string{task.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.MilestoneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.MilestoneTable,
			Columns: []string{task.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.MilestoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.MilestoneTable,
			Columns: []string{task.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
