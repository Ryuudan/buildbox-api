// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/predicate"
	"github.com/Pyakz/buildbox-api/ent/generated/serviceproviderprojects"
)

// ServiceProviderProjectsUpdate is the builder for updating ServiceProviderProjects entities.
type ServiceProviderProjectsUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceProviderProjectsMutation
}

// Where appends a list predicates to the ServiceProviderProjectsUpdate builder.
func (sppu *ServiceProviderProjectsUpdate) Where(ps ...predicate.ServiceProviderProjects) *ServiceProviderProjectsUpdate {
	sppu.mutation.Where(ps...)
	return sppu
}

// SetCreatedBy sets the "created_by" field.
func (sppu *ServiceProviderProjectsUpdate) SetCreatedBy(i int) *ServiceProviderProjectsUpdate {
	sppu.mutation.ResetCreatedBy()
	sppu.mutation.SetCreatedBy(i)
	return sppu
}

// AddCreatedBy adds i to the "created_by" field.
func (sppu *ServiceProviderProjectsUpdate) AddCreatedBy(i int) *ServiceProviderProjectsUpdate {
	sppu.mutation.AddCreatedBy(i)
	return sppu
}

// SetProjectServiceProviderID sets the "project_service_provider_id" field.
func (sppu *ServiceProviderProjectsUpdate) SetProjectServiceProviderID(i int) *ServiceProviderProjectsUpdate {
	sppu.mutation.ResetProjectServiceProviderID()
	sppu.mutation.SetProjectServiceProviderID(i)
	return sppu
}

// SetNillableProjectServiceProviderID sets the "project_service_provider_id" field if the given value is not nil.
func (sppu *ServiceProviderProjectsUpdate) SetNillableProjectServiceProviderID(i *int) *ServiceProviderProjectsUpdate {
	if i != nil {
		sppu.SetProjectServiceProviderID(*i)
	}
	return sppu
}

// AddProjectServiceProviderID adds i to the "project_service_provider_id" field.
func (sppu *ServiceProviderProjectsUpdate) AddProjectServiceProviderID(i int) *ServiceProviderProjectsUpdate {
	sppu.mutation.AddProjectServiceProviderID(i)
	return sppu
}

// ClearProjectServiceProviderID clears the value of the "project_service_provider_id" field.
func (sppu *ServiceProviderProjectsUpdate) ClearProjectServiceProviderID() *ServiceProviderProjectsUpdate {
	sppu.mutation.ClearProjectServiceProviderID()
	return sppu
}

// SetProjectProjectID sets the "project_project_id" field.
func (sppu *ServiceProviderProjectsUpdate) SetProjectProjectID(i int) *ServiceProviderProjectsUpdate {
	sppu.mutation.ResetProjectProjectID()
	sppu.mutation.SetProjectProjectID(i)
	return sppu
}

// SetNillableProjectProjectID sets the "project_project_id" field if the given value is not nil.
func (sppu *ServiceProviderProjectsUpdate) SetNillableProjectProjectID(i *int) *ServiceProviderProjectsUpdate {
	if i != nil {
		sppu.SetProjectProjectID(*i)
	}
	return sppu
}

// AddProjectProjectID adds i to the "project_project_id" field.
func (sppu *ServiceProviderProjectsUpdate) AddProjectProjectID(i int) *ServiceProviderProjectsUpdate {
	sppu.mutation.AddProjectProjectID(i)
	return sppu
}

// ClearProjectProjectID clears the value of the "project_project_id" field.
func (sppu *ServiceProviderProjectsUpdate) ClearProjectProjectID() *ServiceProviderProjectsUpdate {
	sppu.mutation.ClearProjectProjectID()
	return sppu
}

// SetUpdatedAt sets the "updated_at" field.
func (sppu *ServiceProviderProjectsUpdate) SetUpdatedAt(t time.Time) *ServiceProviderProjectsUpdate {
	sppu.mutation.SetUpdatedAt(t)
	return sppu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sppu *ServiceProviderProjectsUpdate) SetNillableUpdatedAt(t *time.Time) *ServiceProviderProjectsUpdate {
	if t != nil {
		sppu.SetUpdatedAt(*t)
	}
	return sppu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sppu *ServiceProviderProjectsUpdate) ClearUpdatedAt() *ServiceProviderProjectsUpdate {
	sppu.mutation.ClearUpdatedAt()
	return sppu
}

// Mutation returns the ServiceProviderProjectsMutation object of the builder.
func (sppu *ServiceProviderProjectsUpdate) Mutation() *ServiceProviderProjectsMutation {
	return sppu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sppu *ServiceProviderProjectsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sppu.sqlSave, sppu.mutation, sppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sppu *ServiceProviderProjectsUpdate) SaveX(ctx context.Context) int {
	affected, err := sppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sppu *ServiceProviderProjectsUpdate) Exec(ctx context.Context) error {
	_, err := sppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sppu *ServiceProviderProjectsUpdate) ExecX(ctx context.Context) {
	if err := sppu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sppu *ServiceProviderProjectsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(serviceproviderprojects.Table, serviceproviderprojects.Columns, sqlgraph.NewFieldSpec(serviceproviderprojects.FieldID, field.TypeInt))
	if ps := sppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sppu.mutation.CreatedBy(); ok {
		_spec.SetField(serviceproviderprojects.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := sppu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(serviceproviderprojects.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := sppu.mutation.ProjectServiceProviderID(); ok {
		_spec.SetField(serviceproviderprojects.FieldProjectServiceProviderID, field.TypeInt, value)
	}
	if value, ok := sppu.mutation.AddedProjectServiceProviderID(); ok {
		_spec.AddField(serviceproviderprojects.FieldProjectServiceProviderID, field.TypeInt, value)
	}
	if sppu.mutation.ProjectServiceProviderIDCleared() {
		_spec.ClearField(serviceproviderprojects.FieldProjectServiceProviderID, field.TypeInt)
	}
	if value, ok := sppu.mutation.ProjectProjectID(); ok {
		_spec.SetField(serviceproviderprojects.FieldProjectProjectID, field.TypeInt, value)
	}
	if value, ok := sppu.mutation.AddedProjectProjectID(); ok {
		_spec.AddField(serviceproviderprojects.FieldProjectProjectID, field.TypeInt, value)
	}
	if sppu.mutation.ProjectProjectIDCleared() {
		_spec.ClearField(serviceproviderprojects.FieldProjectProjectID, field.TypeInt)
	}
	if value, ok := sppu.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceproviderprojects.FieldUpdatedAt, field.TypeTime, value)
	}
	if sppu.mutation.UpdatedAtCleared() {
		_spec.ClearField(serviceproviderprojects.FieldUpdatedAt, field.TypeTime)
	}
	if sppu.mutation.CreatedAtCleared() {
		_spec.ClearField(serviceproviderprojects.FieldCreatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceproviderprojects.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sppu.mutation.done = true
	return n, nil
}

// ServiceProviderProjectsUpdateOne is the builder for updating a single ServiceProviderProjects entity.
type ServiceProviderProjectsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceProviderProjectsMutation
}

// SetCreatedBy sets the "created_by" field.
func (sppuo *ServiceProviderProjectsUpdateOne) SetCreatedBy(i int) *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.ResetCreatedBy()
	sppuo.mutation.SetCreatedBy(i)
	return sppuo
}

// AddCreatedBy adds i to the "created_by" field.
func (sppuo *ServiceProviderProjectsUpdateOne) AddCreatedBy(i int) *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.AddCreatedBy(i)
	return sppuo
}

// SetProjectServiceProviderID sets the "project_service_provider_id" field.
func (sppuo *ServiceProviderProjectsUpdateOne) SetProjectServiceProviderID(i int) *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.ResetProjectServiceProviderID()
	sppuo.mutation.SetProjectServiceProviderID(i)
	return sppuo
}

// SetNillableProjectServiceProviderID sets the "project_service_provider_id" field if the given value is not nil.
func (sppuo *ServiceProviderProjectsUpdateOne) SetNillableProjectServiceProviderID(i *int) *ServiceProviderProjectsUpdateOne {
	if i != nil {
		sppuo.SetProjectServiceProviderID(*i)
	}
	return sppuo
}

// AddProjectServiceProviderID adds i to the "project_service_provider_id" field.
func (sppuo *ServiceProviderProjectsUpdateOne) AddProjectServiceProviderID(i int) *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.AddProjectServiceProviderID(i)
	return sppuo
}

// ClearProjectServiceProviderID clears the value of the "project_service_provider_id" field.
func (sppuo *ServiceProviderProjectsUpdateOne) ClearProjectServiceProviderID() *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.ClearProjectServiceProviderID()
	return sppuo
}

// SetProjectProjectID sets the "project_project_id" field.
func (sppuo *ServiceProviderProjectsUpdateOne) SetProjectProjectID(i int) *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.ResetProjectProjectID()
	sppuo.mutation.SetProjectProjectID(i)
	return sppuo
}

// SetNillableProjectProjectID sets the "project_project_id" field if the given value is not nil.
func (sppuo *ServiceProviderProjectsUpdateOne) SetNillableProjectProjectID(i *int) *ServiceProviderProjectsUpdateOne {
	if i != nil {
		sppuo.SetProjectProjectID(*i)
	}
	return sppuo
}

// AddProjectProjectID adds i to the "project_project_id" field.
func (sppuo *ServiceProviderProjectsUpdateOne) AddProjectProjectID(i int) *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.AddProjectProjectID(i)
	return sppuo
}

// ClearProjectProjectID clears the value of the "project_project_id" field.
func (sppuo *ServiceProviderProjectsUpdateOne) ClearProjectProjectID() *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.ClearProjectProjectID()
	return sppuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sppuo *ServiceProviderProjectsUpdateOne) SetUpdatedAt(t time.Time) *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.SetUpdatedAt(t)
	return sppuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sppuo *ServiceProviderProjectsUpdateOne) SetNillableUpdatedAt(t *time.Time) *ServiceProviderProjectsUpdateOne {
	if t != nil {
		sppuo.SetUpdatedAt(*t)
	}
	return sppuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sppuo *ServiceProviderProjectsUpdateOne) ClearUpdatedAt() *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.ClearUpdatedAt()
	return sppuo
}

// Mutation returns the ServiceProviderProjectsMutation object of the builder.
func (sppuo *ServiceProviderProjectsUpdateOne) Mutation() *ServiceProviderProjectsMutation {
	return sppuo.mutation
}

// Where appends a list predicates to the ServiceProviderProjectsUpdate builder.
func (sppuo *ServiceProviderProjectsUpdateOne) Where(ps ...predicate.ServiceProviderProjects) *ServiceProviderProjectsUpdateOne {
	sppuo.mutation.Where(ps...)
	return sppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sppuo *ServiceProviderProjectsUpdateOne) Select(field string, fields ...string) *ServiceProviderProjectsUpdateOne {
	sppuo.fields = append([]string{field}, fields...)
	return sppuo
}

// Save executes the query and returns the updated ServiceProviderProjects entity.
func (sppuo *ServiceProviderProjectsUpdateOne) Save(ctx context.Context) (*ServiceProviderProjects, error) {
	return withHooks(ctx, sppuo.sqlSave, sppuo.mutation, sppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sppuo *ServiceProviderProjectsUpdateOne) SaveX(ctx context.Context) *ServiceProviderProjects {
	node, err := sppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sppuo *ServiceProviderProjectsUpdateOne) Exec(ctx context.Context) error {
	_, err := sppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sppuo *ServiceProviderProjectsUpdateOne) ExecX(ctx context.Context) {
	if err := sppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sppuo *ServiceProviderProjectsUpdateOne) sqlSave(ctx context.Context) (_node *ServiceProviderProjects, err error) {
	_spec := sqlgraph.NewUpdateSpec(serviceproviderprojects.Table, serviceproviderprojects.Columns, sqlgraph.NewFieldSpec(serviceproviderprojects.FieldID, field.TypeInt))
	id, ok := sppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServiceProviderProjects.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceproviderprojects.FieldID)
		for _, f := range fields {
			if !serviceproviderprojects.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != serviceproviderprojects.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sppuo.mutation.CreatedBy(); ok {
		_spec.SetField(serviceproviderprojects.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := sppuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(serviceproviderprojects.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := sppuo.mutation.ProjectServiceProviderID(); ok {
		_spec.SetField(serviceproviderprojects.FieldProjectServiceProviderID, field.TypeInt, value)
	}
	if value, ok := sppuo.mutation.AddedProjectServiceProviderID(); ok {
		_spec.AddField(serviceproviderprojects.FieldProjectServiceProviderID, field.TypeInt, value)
	}
	if sppuo.mutation.ProjectServiceProviderIDCleared() {
		_spec.ClearField(serviceproviderprojects.FieldProjectServiceProviderID, field.TypeInt)
	}
	if value, ok := sppuo.mutation.ProjectProjectID(); ok {
		_spec.SetField(serviceproviderprojects.FieldProjectProjectID, field.TypeInt, value)
	}
	if value, ok := sppuo.mutation.AddedProjectProjectID(); ok {
		_spec.AddField(serviceproviderprojects.FieldProjectProjectID, field.TypeInt, value)
	}
	if sppuo.mutation.ProjectProjectIDCleared() {
		_spec.ClearField(serviceproviderprojects.FieldProjectProjectID, field.TypeInt)
	}
	if value, ok := sppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceproviderprojects.FieldUpdatedAt, field.TypeTime, value)
	}
	if sppuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(serviceproviderprojects.FieldUpdatedAt, field.TypeTime)
	}
	if sppuo.mutation.CreatedAtCleared() {
		_spec.ClearField(serviceproviderprojects.FieldCreatedAt, field.TypeTime)
	}
	_node = &ServiceProviderProjects{config: sppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceproviderprojects.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sppuo.mutation.done = true
	return _node, nil
}
