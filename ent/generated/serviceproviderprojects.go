// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pyakz/buildbox-api/ent/generated/serviceproviderprojects"
	"github.com/google/uuid"
)

// ServiceProviderProjects is the model entity for the ServiceProviderProjects schema.
type ServiceProviderProjects struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// ProjectServiceProviderID holds the value of the "project_service_provider_id" field.
	ProjectServiceProviderID int `json:"project_service_provider_id,omitempty"`
	// ProjectProjectID holds the value of the "project_project_id" field.
	ProjectProjectID int `json:"project_project_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID         uuid.UUID `json:"uuid,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceProviderProjects) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceproviderprojects.FieldID, serviceproviderprojects.FieldCreatedBy, serviceproviderprojects.FieldProjectServiceProviderID, serviceproviderprojects.FieldProjectProjectID:
			values[i] = new(sql.NullInt64)
		case serviceproviderprojects.FieldUpdatedAt, serviceproviderprojects.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case serviceproviderprojects.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceProviderProjects fields.
func (spp *ServiceProviderProjects) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceproviderprojects.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			spp.ID = int(value.Int64)
		case serviceproviderprojects.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				spp.CreatedBy = int(value.Int64)
			}
		case serviceproviderprojects.FieldProjectServiceProviderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_service_provider_id", values[i])
			} else if value.Valid {
				spp.ProjectServiceProviderID = int(value.Int64)
			}
		case serviceproviderprojects.FieldProjectProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_project_id", values[i])
			} else if value.Valid {
				spp.ProjectProjectID = int(value.Int64)
			}
		case serviceproviderprojects.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				spp.UpdatedAt = value.Time
			}
		case serviceproviderprojects.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				spp.CreatedAt = value.Time
			}
		case serviceproviderprojects.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				spp.UUID = *value
			}
		default:
			spp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceProviderProjects.
// This includes values selected through modifiers, order, etc.
func (spp *ServiceProviderProjects) Value(name string) (ent.Value, error) {
	return spp.selectValues.Get(name)
}

// Update returns a builder for updating this ServiceProviderProjects.
// Note that you need to call ServiceProviderProjects.Unwrap() before calling this method if this ServiceProviderProjects
// was returned from a transaction, and the transaction was committed or rolled back.
func (spp *ServiceProviderProjects) Update() *ServiceProviderProjectsUpdateOne {
	return NewServiceProviderProjectsClient(spp.config).UpdateOne(spp)
}

// Unwrap unwraps the ServiceProviderProjects entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spp *ServiceProviderProjects) Unwrap() *ServiceProviderProjects {
	_tx, ok := spp.config.driver.(*txDriver)
	if !ok {
		panic("generated: ServiceProviderProjects is not a transactional entity")
	}
	spp.config.driver = _tx.drv
	return spp
}

// String implements the fmt.Stringer.
func (spp *ServiceProviderProjects) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceProviderProjects(")
	builder.WriteString(fmt.Sprintf("id=%v, ", spp.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", spp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("project_service_provider_id=")
	builder.WriteString(fmt.Sprintf("%v", spp.ProjectServiceProviderID))
	builder.WriteString(", ")
	builder.WriteString("project_project_id=")
	builder.WriteString(fmt.Sprintf("%v", spp.ProjectProjectID))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(spp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(spp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", spp.UUID))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceProviderProjectsSlice is a parsable slice of ServiceProviderProjects.
type ServiceProviderProjectsSlice []*ServiceProviderProjects
