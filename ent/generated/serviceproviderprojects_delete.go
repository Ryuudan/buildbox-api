// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pyakz/buildbox-api/ent/generated/predicate"
	"github.com/Pyakz/buildbox-api/ent/generated/serviceproviderprojects"
)

// ServiceProviderProjectsDelete is the builder for deleting a ServiceProviderProjects entity.
type ServiceProviderProjectsDelete struct {
	config
	hooks    []Hook
	mutation *ServiceProviderProjectsMutation
}

// Where appends a list predicates to the ServiceProviderProjectsDelete builder.
func (sppd *ServiceProviderProjectsDelete) Where(ps ...predicate.ServiceProviderProjects) *ServiceProviderProjectsDelete {
	sppd.mutation.Where(ps...)
	return sppd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sppd *ServiceProviderProjectsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sppd.sqlExec, sppd.mutation, sppd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sppd *ServiceProviderProjectsDelete) ExecX(ctx context.Context) int {
	n, err := sppd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sppd *ServiceProviderProjectsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(serviceproviderprojects.Table, sqlgraph.NewFieldSpec(serviceproviderprojects.FieldID, field.TypeInt))
	if ps := sppd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sppd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sppd.mutation.done = true
	return affected, err
}

// ServiceProviderProjectsDeleteOne is the builder for deleting a single ServiceProviderProjects entity.
type ServiceProviderProjectsDeleteOne struct {
	sppd *ServiceProviderProjectsDelete
}

// Where appends a list predicates to the ServiceProviderProjectsDelete builder.
func (sppdo *ServiceProviderProjectsDeleteOne) Where(ps ...predicate.ServiceProviderProjects) *ServiceProviderProjectsDeleteOne {
	sppdo.sppd.mutation.Where(ps...)
	return sppdo
}

// Exec executes the deletion query.
func (sppdo *ServiceProviderProjectsDeleteOne) Exec(ctx context.Context) error {
	n, err := sppdo.sppd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{serviceproviderprojects.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sppdo *ServiceProviderProjectsDeleteOne) ExecX(ctx context.Context) {
	if err := sppdo.Exec(ctx); err != nil {
		panic(err)
	}
}
